{"version":3,"file":"ngx-modialog-vex.es5.js","sources":["../../../../../src/ngx-modialog/plugins/vex/src/ngx-modialog-vex.ng-flat.ts","../../../../../src/ngx-modialog/plugins/vex/src/vex.module.ts","../../../../../src/ngx-modialog/plugins/vex/src/modal.ts","../../../../../src/ngx-modialog/plugins/vex/src/vex-css-dialog-container.ts","../../../../../src/ngx-modialog/plugins/vex/src/presets/dropin-preset.ts","../../../../../src/ngx-modialog/plugins/vex/src/presets/dialog-preset.ts","../../../../../src/ngx-modialog/plugins/vex/src/modal-context.ts","../../../../../src/ngx-modialog/plugins/vex/src/dialog-form-modal.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Modal,vexV3Mode,VEXBuiltInThemes,VEXModalContext,VEXModalContextBuilder,DropInPreset,DropInPresetBuilder,DialogFormModal,FormDropIn,VEXButtonClickEvent,VEXButtonConfig,VEXButtonHandler,VEXDialogButtons,DialogPreset,DialogPresetBuilder,VexModalModule,providers} from './vex';\n\nexport {VexCSSDialogContainer as Éµa} from './vex-css-dialog-container';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ModalModule, Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\nimport { DialogFormModal, FormDropIn, VEXDialogButtons } from './dialog-form-modal';\nimport { VexCSSDialogContainer } from './vex-css-dialog-container';\n\nexport const /** @type {?} */ providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\nexport class VexModalModule {\n/**\n * @return {?}\n */\nstatic getProviders(): any[] {\n    return providers;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [ ModalModule, CommonModule ],\n  declarations: [\n    VexCSSDialogContainer,\n    VEXDialogButtons,\n    FormDropIn,\n    DialogFormModal\n  ],\n  providers,\n  entryComponents: [\n    VexCSSDialogContainer,\n    DialogFormModal,\n    FormDropIn\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction VexModalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nVexModalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nVexModalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Observable } from 'rxjs';\nimport { combineLatest } from 'rxjs/operator/combineLatest';\nimport { Injectable } from '@angular/core';\n\nimport {\n  ContainerContent,\n  Overlay,\n  DialogRef,\n  DROP_IN_TYPE,\n  Modal as Modal_,\n  CSSBackdrop,\n  CSSDialogContainer,\n  PromiseCompleter\n} from 'ngx-modialog';\n\nimport { DropInPresetBuilder } from './presets/dropin-preset';\nimport { VexCSSDialogContainer } from './vex-css-dialog-container';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst /** @type {?} */ isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nlet /** @type {?} */ vexV3 = false;\n/**\n * Execute this method to flag that you are working with VEX version 3.\n * @return {?}\n */\nexport function vexV3Mode(): void {\n  vexV3 = true;\n}\nexport class Modal extends Modal_ {\n/**\n * @param {?} overlay\n */\nconstructor(overlay: Overlay) {\n    super(overlay);\n  }\n/**\n * @return {?}\n */\nalert(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.alert, /** @type {?} */(( {isBlocking: false} as any)));\n  }\n/**\n * @return {?}\n */\nprompt(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.prompt, /** @type {?} */(( {\n      isBlocking: true,\n      keyboard: null\n    }  as any)));\n  }\n/**\n * @return {?}\n */\nconfirm(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.confirm, /** @type {?} */(( {\n      isBlocking: true,\n      keyboard: null\n    }  as any)));\n  }\n/**\n * @param {?} dialogRef\n * @param {?} content\n * @return {?}\n */\nprotected create(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n    if (vexV3 === true) {\n      return this.createV3(dialogRef, content);\n    }\n\n    const /** @type {?} */ backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const /** @type {?} */ containerRef = this.createContainer(dialogRef, VexCSSDialogContainer, content);\n\n    let /** @type {?} */ overlay = dialogRef.overlayRef.instance;\n    let /** @type {?} */ backdrop = backdropRef.instance;\n    let /** @type {?} */ container = containerRef.instance;\n\n    if (dialogRef.inElement) {\n      overlay.insideElement();\n\n      overlay.setContainerStyle('position', 'relative')\n        .setContainerStyle('height', '100%')\n        .setContainerStyle('width', '100%');\n\n      backdrop.setStyle('position', 'absolute')\n        .setStyle('display', 'block')\n        .setStyle('height', '100%')\n        .setStyle('width', '100%');\n\n      container.setStyle('position', 'relative')\n        .setStyle('display', 'block')\n        .setStyle('height', '100%')\n        .setStyle('width', '100%');\n\n    } else {\n      overlay.fullscreen();\n    }\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('vex-open')) {\n      document.body.classList.add('vex-open');\n    }\n\n    backdrop.addClass('vex-overlay');\n    container.addClass(`vex vex-theme-${dialogRef.context.className}`);\n\n    container.setStyle('display', 'block');\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    overlay.beforeDestroy(() => {\n      backdrop.addClass('vex-closing');\n      container.addClass('vex-closing');\n      const /** @type {?} */ completer = new PromiseCompleter<void>();\n\n      let /** @type {?} */ animationEnd$: Observable<any> = backdrop.myAnimationEnd$();\n\n      // TODO: the child element inside the container (vex-content) is the one with animation\n      // need to also wait for it to end, but this requires a reference to to it.\n      // the container itself is its parent, won't do.\n      // animationEnd$ = combineLatest.call(animationEnd$, container.myAnimationEnd$(), (s1, s2) => [s1,s2] );\n\n      animationEnd$.subscribe( sources => {\n        isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n        completer.resolve();\n      });\n\n      return completer.promise;\n    });\n\n    container.apply(overlay);\n\n    return dialogRef;\n  }\n/**\n * @param {?} dialogRef\n * @param {?} content\n * @return {?}\n */\nprivate createV3(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n\n    const /** @type {?} */ backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const /** @type {?} */ containerRef = this.createContainer(dialogRef, CSSDialogContainer, content);\n\n    let /** @type {?} */ overlay = dialogRef.overlayRef.instance;\n    let /** @type {?} */ backdrop = backdropRef.instance;\n    let /** @type {?} */ container = containerRef.instance;\n\n    dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('vex-open')) {\n      document.body.classList.add('vex-open');\n    }\n\n    overlay.addClass(`vex vex-theme-${dialogRef.context.className}`);\n    backdrop.addClass('vex-overlay');\n    container.addClass(dialogRef.context.contentClassName);\n    container.setStyle('display', 'block');\n    if (dialogRef.inElement) {\n      overlay.setStyle('padding', '0');\n      container.setStyle('margin-top', '20px');\n    }\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    if (dialogRef.context.className === 'bottom-right-corner') {\n      overlay.setStyle('overflow-y', 'hidden');\n      container.setStyle('position', 'absolute');\n    }\n\n    overlay.beforeDestroy(() => {\n      overlay.addClass('vex-closing');\n      const /** @type {?} */ completer = new PromiseCompleter<void>();\n\n      let /** @type {?} */ animationEnd$: Observable<any> = container.myAnimationEnd$();\n      if (dialogRef.context.className !== 'bottom-right-corner') {\n        animationEnd$ = combineLatest.call(animationEnd$, backdrop.myAnimationEnd$(), (s1, s2) => [s1,s2] );\n      }\n\n      animationEnd$.subscribe( sources => {\n        isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n        completer.resolve();\n      });\n\n      return completer.promise;\n    });\n\n\n    overlay.setClickBoundary(containerRef.location.nativeElement);\n\n    return dialogRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n];\n}\n\nfunction Modal_tsickle_Closure_declarations() {\n/** @type {?} */\nModal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nModal.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { CSSDialogContainer, ModalOverlay } from 'ngx-modialog';\n/**\n * A component that acts as a top level container for an open modal window.\n */\nexport class VexCSSDialogContainer extends CSSDialogContainer {\n/**\n * The div that wraps the content of the modal, by default use the class `vex-content`\n */\npublic vexContentContainer: ElementRef;\n/**\n * @param {?} overlay\n * @return {?}\n */\napply(overlay: ModalOverlay): void {\n    overlay.setClickBoundary(this.vexContentContainer.nativeElement);\n\n    if (this.dialog.inElement) {\n      this.setStyle('padding', '20px 0 0 0');\n\n\n      if (this.dialog.context.className === 'bottom-right-corner') {\n        this.setStyle('overflow-y', 'hidden');\n        this.renderer.setElementStyle(this.vexContentContainer.nativeElement, 'position', 'absolute');\n      }\n    }\n\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'css-dialog-container',\n  host: {\n    'tabindex': '-1',\n    'role': 'dialog'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: `<div #clickBoundary class=\"{{dialog.context.contentClassName}}\"><ng-content></ng-content></div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vexContentContainer': [{ type: ViewChild, args: ['clickBoundary', {read: ElementRef}, ] },],\n};\n}\n\nfunction VexCSSDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nVexCSSDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nVexCSSDialogContainer.ctorParameters;\n/** @type {?} */\nVexCSSDialogContainer.propDecorators;\n/**\n * The div that wraps the content of the modal, by default use the class `vex-content`\n * @type {?}\n */\nVexCSSDialogContainer.prototype.vexContentContainer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ResolvedReflectiveProvider } from '@angular/core';\nimport {\n  DROP_IN_TYPE,\n  FluentAssignMethod,\n  extend\n} from 'ngx-modialog';\nimport { Modal } from '../modal';\nimport { DialogFormModal as component, FormDropIn as content } from '../dialog-form-modal';\nimport { DialogPreset, DialogPresetBuilder } from './dialog-preset';\n\nconst /** @type {?} */ DEFAULT_VALUES = {\n  component,\n  content,\n  okBtn: 'OK',\n  cancelBtn: 'Cancel'\n};\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n  'okBtn',\n  'cancelBtn',\n  'placeholder'\n];\n/**\n * Data definition\n */\nexport class DropInPreset extends DialogPreset {\n/**\n * the message to display on the modal.\n */\nmessage: string;\n/**\n * OK button caption.\n * Default: OK\n * Set to false ('', undefined, null, false) to remove button.\n */\nokBtn: string;\n/**\n * Cancel button caption.\n * Default: Cancel\n * Set to false ('', undefined, null, false) to remove button.\n */\ncancelBtn: string;\n/**\n * A placeholder for the input element.\n * Valid only for prompt modal.\n */\nplaceholder: string;\n\n  dropInType: DROP_IN_TYPE;\n/**\n * @return {?}\n */\nget showInput(): boolean {\n    return this.dropInType === DROP_IN_TYPE.prompt;\n  }\n}\n\nfunction DropInPreset_tsickle_Closure_declarations() {\n/**\n * the message to display on the modal.\n * @type {?}\n */\nDropInPreset.prototype.message;\n/**\n * OK button caption.\n * Default: OK\n * Set to false ('', undefined, null, false) to remove button.\n * @type {?}\n */\nDropInPreset.prototype.okBtn;\n/**\n * Cancel button caption.\n * Default: Cancel\n * Set to false ('', undefined, null, false) to remove button.\n * @type {?}\n */\nDropInPreset.prototype.cancelBtn;\n/**\n * A placeholder for the input element.\n * Valid only for prompt modal.\n * @type {?}\n */\nDropInPreset.prototype.placeholder;\n/** @type {?} */\nDropInPreset.prototype.dropInType;\n}\n\n/**\n * A Preset representing all 3 drop ins (alert, prompt, confirm)\n */\nexport class DropInPresetBuilder extends DialogPresetBuilder<DropInPreset> {\n/**\n * the message to display on the modal.\n */\nmessage: FluentAssignMethod<string, this>;\n/**\n * The default Ok button caption.\n */\nokBtn: FluentAssignMethod<string, this>;\n/**\n * The default Cancel button caption.\n */\ncancelBtn: FluentAssignMethod<string, this>;\n/**\n * A placeholder for the input element.\n * Valid only for prompt modal.\n */\nplaceholder: FluentAssignMethod<string, this>;\n/**\n * @param {?} modal\n * @param {?} dropInType\n * @param {?=} defaultValues\n */\nconstructor(modal: Modal, dropInType: DROP_IN_TYPE, defaultValues: DropInPreset = undefined) {\n    super(\n      modal,\n      extend<any>(extend({modal, dropInType}, DEFAULT_VALUES), defaultValues || {}),\n      DEFAULT_SETTERS,\n      DropInPreset\n    );\n  }\n/**\n * @param {?} config\n * @return {?}\n */\n$$beforeOpen(config: DropInPreset): ResolvedReflectiveProvider[] {\n    if (config.okBtn) {\n      this.addOkButton(config.okBtn);\n    }\n\n    switch (config.dropInType) {\n      case DROP_IN_TYPE.prompt:\n        config.defaultResult = undefined;\n      case DROP_IN_TYPE.confirm:\n        if (config.cancelBtn) {\n          this.addCancelButton(config.cancelBtn);\n        }\n        break;\n    }\n    return super.$$beforeOpen(config);\n  }\n}\n\nfunction DropInPresetBuilder_tsickle_Closure_declarations() {\n/**\n * the message to display on the modal.\n * @type {?}\n */\nDropInPresetBuilder.prototype.message;\n/**\n * The default Ok button caption.\n * @type {?}\n */\nDropInPresetBuilder.prototype.okBtn;\n/**\n * The default Cancel button caption.\n * @type {?}\n */\nDropInPresetBuilder.prototype.cancelBtn;\n/**\n * A placeholder for the input element.\n * Valid only for prompt modal.\n * @type {?}\n */\nDropInPresetBuilder.prototype.placeholder;\n}\n\n","import { Type } from '@angular/core';\nimport {\n  FluentAssignMethod,\n  privateKey,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport { VEXModalContext, VEXModalContextBuilder } from '../modal-context';\nimport { Modal } from '../modal';\nimport {\n  DialogFormModal as component,\n  VEXButtonHandler,\n  VEXButtonConfig\n} from '../dialog-form-modal';\n\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n  'content'\n];\n/**\n * Data definition\n */\nexport class DialogPreset extends VEXModalContext {\n  defaultResult: any;\n  content: Type<any>;\n  buttons: VEXButtonConfig[];\n  showInput: any;\n}\n\nfunction DialogPreset_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogPreset.prototype.defaultResult;\n/** @type {?} */\nDialogPreset.prototype.content;\n/** @type {?} */\nDialogPreset.prototype.buttons;\n/** @type {?} */\nDialogPreset.prototype.showInput;\n}\n\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nexport class DialogPresetBuilder<T extends DialogPreset>\nextends VEXModalContextBuilder<T> {\n/**\n * the message to display on the modal.\n */\ncontent: FluentAssignMethod<Type<any>, this>;\n/**\n * @param {?} modal\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n * @param {?=} baseType\n */\nconstructor(modal: Modal,\n              defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>({modal, component, buttons: [], defaultResult: true}, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>DialogPreset // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n/**\n * @param {?} css\n * @param {?} caption\n * @param {?} onClick\n * @return {?}\n */\naddButton(css: string, caption: string, onClick: VEXButtonHandler): this {\n    let /** @type {?} */ btn = {\n      cssClass: css,\n      caption: caption,\n      onClick: onClick\n    };\n\n    let /** @type {?} */ key = privateKey('buttons');\n    ( /** @type {?} */((this[key] as VEXButtonConfig[]))).push(btn);\n\n    return this;\n  }\n/**\n * @param {?=} text\n * @return {?}\n */\naddOkButton(text: string = 'OK'): this {\n    this.addButton(\n      'vex-dialog-button-primary vex-dialog-button vex-first',\n      text,\n      (cmp: component, $event: MouseEvent) => cmp.dialog.close(cmp.dialog.context.defaultResult)\n    );\n    return this;\n  }\n/**\n * @param {?=} text\n * @return {?}\n */\naddCancelButton(text: string = 'CANCEL'): this {\n    this.addButton(\n      'vex-dialog-button-secondary vex-dialog-button vex-last',\n      text,\n      (cmp: component, $event: MouseEvent) => cmp.dialog.dismiss()\n    );\n    return this;\n  }\n}\n\nfunction DialogPresetBuilder_tsickle_Closure_declarations() {\n/**\n * the message to display on the modal.\n * @type {?}\n */\nDialogPresetBuilder.prototype.content;\n}\n\n","import {\n  ModalOpenContext,\n  ModalOpenContextBuilder,\n  FluentAssignMethod,\n  privateKey,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\n\n\nconst /** @type {?} */ DEFAULT_VALUES = {\n  className: /** @type {?} */(( <VEXBuiltInThemes>'default')),\n  overlayClassName: 'vex-overlay',\n  contentClassName: 'vex-content',\n  closeClassName: 'vex-close'\n};\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n  'className',\n  'overlayClassName',\n  'contentClassName',\n  'closeClassName',\n  'showCloseButton'\n];\n\nexport type VEXBuiltInThemes\n  = 'default' | 'os' | 'plain' | 'wireframe' | 'flat-attack' | 'top' | 'bottom-right-corner';\nexport class VEXModalContext extends ModalOpenContext {\n/**\n * Set the built in schema to use.\n */\nclassName: VEXBuiltInThemes;\n\n  overlayClassName: string;\n  contentClassName: string;\n  closeClassName: string;\n\n  showCloseButton: boolean;\n/**\n * @return {?}\n */\nnormalize(): void {\n    if (!this.className) {\n      this.className = DEFAULT_VALUES.className;\n    }\n\n    if (!this.overlayClassName) {\n      this.overlayClassName = DEFAULT_VALUES.overlayClassName;\n    }\n\n    if (!this.contentClassName) {\n      this.contentClassName = DEFAULT_VALUES.contentClassName;\n    }\n\n    if (!this.closeClassName) {\n      this.closeClassName = DEFAULT_VALUES.closeClassName;\n    }\n\n    super.normalize();\n  }\n}\n\nfunction VEXModalContext_tsickle_Closure_declarations() {\n/**\n * Set the built in schema to use.\n * @type {?}\n */\nVEXModalContext.prototype.className;\n/** @type {?} */\nVEXModalContext.prototype.overlayClassName;\n/** @type {?} */\nVEXModalContext.prototype.contentClassName;\n/** @type {?} */\nVEXModalContext.prototype.closeClassName;\n/** @type {?} */\nVEXModalContext.prototype.showCloseButton;\n}\n\nexport class VEXModalContextBuilder<T extends VEXModalContext> extends ModalOpenContextBuilder<T> {\n/**\n * Set the built in schema to use.\n */\nclassName: FluentAssignMethod<VEXBuiltInThemes, this>;\n\n  overlayClassName: FluentAssignMethod<string, this>;\n  contentClassName: FluentAssignMethod<string, this>;\n  closeClassName: FluentAssignMethod<string, this>;\n\n  showCloseButton: FluentAssignMethod<boolean, this>;\n/**\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n * @param {?=} baseType\n */\nconstructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(DEFAULT_VALUES, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>VEXModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n/**\n *\n * \\@aliasFor isBlocking\n * @param {?} value\n * @return {?}\n */\noverlayClosesOnClick(value: boolean): this {\n    this[privateKey('isBlocking')] = !value;\n    return this;\n  }\n}\n\nfunction VEXModalContextBuilder_tsickle_Closure_declarations() {\n/**\n * Set the built in schema to use.\n * @type {?}\n */\nVEXModalContextBuilder.prototype.className;\n/** @type {?} */\nVEXModalContextBuilder.prototype.overlayClassName;\n/** @type {?} */\nVEXModalContextBuilder.prototype.contentClassName;\n/** @type {?} */\nVEXModalContextBuilder.prototype.closeClassName;\n/** @type {?} */\nVEXModalContextBuilder.prototype.showCloseButton;\n}\n\n","import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport {\n  DialogRef,\n  ModalComponent\n} from 'ngx-modialog';\n\nimport { DialogPreset } from './presets/dialog-preset';\nimport { DropInPreset } from './presets/dropin-preset';\n\nexport interface VEXButtonHandler {\n  (cmp: ModalComponent<DialogPreset>, $event: MouseEvent): void;\n}\n\n/**\n * Interface for button definition\n */\nexport interface VEXButtonConfig {\n  cssClass: string;\n  caption: string;\n  onClick: VEXButtonHandler;\n}\n\nexport interface VEXButtonClickEvent {\n  btn: VEXButtonConfig;\n  $event: MouseEvent;\n}\n/**\n * A Dialog is a\n */\nexport class VEXDialogButtons {\n/**\n * A collection of button configurations, each configuration is a button to display.\n */\npublic buttons: VEXButtonConfig[];\n/**\n * Emitted when a button was clicked\n */\npublic onButtonClick = new EventEmitter<VEXButtonClickEvent>();\n/**\n * @param {?} btn\n * @param {?} $event\n * @return {?}\n */\nonClick(btn: any, $event: MouseEvent) {\n    $event.stopPropagation();\n    this.onButtonClick.emit({btn, $event});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'vex-dialog-buttons',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div class=\"vex-dialog-buttons\">\n    <button type=\"button\" \n         *ngFor=\"let btn of buttons;\"\n         [class]=\"btn.cssClass\"\n         (click)=\"onClick(btn, $event)\">{{btn.caption}}</button>\n</div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'buttons': [{ type: Input },],\n'onButtonClick': [{ type: Output },],\n};\n}\n\nfunction VEXDialogButtons_tsickle_Closure_declarations() {\n/** @type {?} */\nVEXDialogButtons.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nVEXDialogButtons.ctorParameters;\n/** @type {?} */\nVEXDialogButtons.propDecorators;\n/**\n * A collection of button configurations, each configuration is a button to display.\n * @type {?}\n */\nVEXDialogButtons.prototype.buttons;\n/**\n * Emitted when a button was clicked\n * @type {?}\n */\nVEXDialogButtons.prototype.onButtonClick;\n}\n\n/**\n * A Dialog with customized buttons wrapped in a form.\n * \n */\nexport class DialogFormModal implements ModalComponent<DialogPreset> {\npublic context: DialogPreset;\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: DialogRef<DialogPreset>) {\n    this.context = dialog.context;\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonButtonClick($event: VEXButtonClickEvent) {\n    $event.btn.onClick(this, $event.$event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'modal-dialog',\n  encapsulation: ViewEncapsulation.None,\n  template: `<form class=\"vex-dialog-form\">\n    <ng-container *ngComponentOutlet=\"context.content\"></ng-container>\n    <vex-dialog-buttons [buttons]=\"context.buttons\"\n                        (onButtonClick)=\"onButtonClick($event)\"></vex-dialog-buttons>\n</form>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DialogRef, },\n];\n}\n\nfunction DialogFormModal_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogFormModal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogFormModal.ctorParameters;\n/** @type {?} */\nDialogFormModal.prototype.context;\n/** @type {?} */\nDialogFormModal.prototype.dialog;\n}\n\nexport class FormDropIn implements ModalComponent<DropInPreset> {\npublic context: DropInPreset;\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: DialogRef<DropInPreset>) {\n    this.context = dialog.context;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'drop-in-dialog',\n  encapsulation: ViewEncapsulation.None,\n  template:\n`<div class=\"vex-dialog-message\">{{context.message}}</div>\n <div *ngIf=\"context.showInput\" class=\"vex-dialog-input\">\n   <input #input\n          autofocus\n          name=\"vex\" \n          type=\"text\" \n          class=\"vex-dialog-prompt-input\"\n           (change)=\"context.defaultResult = input.value\" \n          placeholder=\"{{context.placeholder}}\">\n </div>\n <div *ngIf=\"context.showCloseButton\" \n      [class]=\"context.closeClassName\"\n      (click)=\"dialog.dismiss()\"></div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DialogRef, },\n];\n}\n\nfunction FormDropIn_tsickle_Closure_declarations() {\n/** @type {?} */\nFormDropIn.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormDropIn.ctorParameters;\n/** @type {?} */\nFormDropIn.prototype.context;\n/** @type {?} */\nFormDropIn.prototype.dialog;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Modal","BaseModal","Modal_","__extends","content","component","DEFAULT_SETTERS","DEFAULT_VALUES"],"mappings":";;;;;AOiCA;;;AAGA,IAAA,gBAAA,IAAA,YAAA;IAAA,SAAA,gBAAA,GAAA;;;;QAaI,IAAJ,CAAA,aAAI,GAAA,IAAA,YAAA,EAAA,CAAA;KA0BH;;;;;;IAzBD,gBAAA,CAAA,SAAA,CAAA,OACG,GADH,UACG,GAAA,EAAA,MAAA,EADH;QACI,MAAM,CACC,eAAC,EAAe,CAAE;QAAzB,IAAI,CACC,aAAC,CAAa,IAAC,CAAI,EAAC,GAAC,EAD9B,GAC8B,EAAI,MAAA,EADlC,MACkC,EAAO,CAAC,CAAC;KAAxC,CAAH;IAEO,gBAAP,CAAA,UAAO,GAAoC;QAA3C,EACE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;oBAAvB,QAAQ,EACE,oBAAA;oBAAV,aAAa,EACE,iBAAA,CAAkB,IAAC;oBAAlC,QAAQ,EACE,0NAIL;iBACN,EACC,EAAG;KAAJ,CACC;;;;IAED,gBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAEA,CAFD,EAEC,CAAC;IAAK,gBAAP,CAAA,cAAO,GAAyD;QAEhE,SAAS,EADE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;QAE5B,eAAe,EADE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;KAElC,CADC;IAEF,OAAA,gBAAC,CAAD;CAvCA,EAAA,CAAA,CAuCC;AArCD,AA6DA;;;;AAIA,IAAA,eAAA,IAAA,YAAA;;;;IAKA,SAAA,eAAA,CAxBqB,MAA+B,EAwBpD;QAxBqB,IAArB,CAAA,MAAqB,GAAA,MAAA,CAA+B;QAyBhD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;KAC/B;;;;;IAKH,eAAA,CAAA,SAAA,CAAA,aA3BG,GA2BH,UA3BG,MAAA,EA2BH;QACI,MAAM,CA3BC,GAAC,CAAG,OAAC,CAAO,IAAC,EAAK,MAAA,CAAO,MAAC,CAAM,CAAC;KA4BzC,CAAH;IA1BO,eAAP,CAAA,UAAO,GAAoC;QA4B3C,EA3BE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;oBA4BvB,QAAQ,EA3BE,cAAA;oBA4BV,aAAa,EA3BE,iBAAA,CAAkB,IAAC;oBA4BlC,QAAQ,EA3BE,qQA+BJ;iBACP,EA3BC,EAAG;KA4BJ,CA3BC;;;;IAED,eAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;QA8BD,EAAC,IAAI,EAAE,SAAS,GAAG;KAClB,CAAD,EAAC,CAAC;IACF,OAAA,eAAC,CAAD;CAhCA,EAAA,CAAA,CAgCC;AAtDD,AAsEA,IAAA,UAAA,IAAA,YAAA;;;;IAKA,SAAA,UAAA,CA5CqB,MAA+B,EA4CpD;QA5CqB,IAArB,CAAA,MAAqB,GAAA,MAAA,CAA+B;QA6ChD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;KAC/B;IA3CI,UAAP,CAAA,UAAO,GAAoC;QA6C3C,EA5CE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;oBA6CvB,QAAQ,EA5CE,gBAAA;oBA6CV,aAAa,EA5CE,iBAAA,CAAkB,IAAC;oBA6ClC,QAAQ,EACV,6fAYwC;iBACvC,EA5CC,EAAG;KA6CJ,CA5CC;;;;IAED,UAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;QA+CD,EAAC,IAAI,EAAE,SAAS,GAAG;KAClB,CAAD,EAAC,CAAC;IACF,OAAA,UAAC,CAAD;CAlCA,EAAA,CAAA;;;;;;;;;;;;ADvJA,AAUA,IAAMO,gBAAA,GAAiB;IACrB,SAAS,oBAAoB,SAAC,CAAA;IAC9B,gBAAgB,EAAE,aAAA;IAClB,gBAAgB,EAAE,aAAA;IAClB,cAAc,EAAE,WAAA;CACjB,CAAC;AAEF,IAAMD,iBAAA,GAAkB;IACtB,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,iBAAiB;CAClB,CAAC;AAIF,IAAA,eAAA,IAAA,UAAA,MAAA,EAAA;IACCH,WAAD,CAAA,eAAA,EAAA,MAAA,CAAA,CAAC;IADD,SAAA,eAAA,GAAA;;KAiCC;;;;IAnBD,eAAA,CAAA,SAAA,CAAA,SAAG,GAAH,YAAA;QACI,IAAI,CAAC,IAAC,CAAI,SAAC,EAAU;YACnB,IAAI,CAAC,SAAC,GAAWI,gBAAA,CAAe,SAAC,CAAS;SAC3C;QAED,IAAI,CAAC,IAAC,CAAI,gBAAC,EAAiB;YAC1B,IAAI,CAAC,gBAAC,GAAkBA,gBAAA,CAAe,gBAAC,CAAgB;SACzD;QAED,IAAI,CAAC,IAAC,CAAI,gBAAC,EAAiB;YAC1B,IAAI,CAAC,gBAAC,GAAkBA,gBAAA,CAAe,gBAAC,CAAgB;SACzD;QAED,IAAI,CAAC,IAAC,CAAI,cAAC,EAAe;YACxB,IAAI,CAAC,cAAC,GAAgBA,gBAAA,CAAe,cAAC,CAAc;SACrD;QAED,MAAJ,CAAA,SAAA,CAAU,SAAC,CAAX,IAAA,CAAA,IAAA,CAAoB,CAAE;KACnB,CAAH;IACA,OAAA,eAAC,CAAD;CAjCA,CACC,gBAAA,CAgCD,CAAA,CAAC;AAkBD,IAAA,sBAAA,IAAA,UAAA,MAAA,EAAA;IAhBCJ,WAAD,CAAA,sBAAA,EAAA,MAAA,CAAA,CAAC;;;;;;IAgCD,SAAA,sBAAA,CApBG,aAA8B,EAqBnB,cApB2B,EAqB3B,QApBwB,EAkBtC;QApBG,IAAH,aAAA,KAAA,KAAA,CAAA,EAAG,EAAA,aAAH,GAAA,SAAiC,CAAjC,EAAA;QAqBc,IAAd,cAAA,KAAA,KAAA,CAAA,EAAc,EAAA,cAAd,GAAA,SApByC,CAoBzC,EAAA;QACc,IAAd,QAAA,KAAA,KAAA,CAAA,EAAc,EAAA,QAAd,GAAA,SApBsC,CAoBtC,EAAA;QACA,OAAI,MAAJ,CAAA,IAAA,CAAA,IAAA,EACM,MAAM,CAAMI,gBAAc,EAAE,aAAa,IAAI,EAAE,CAAC,EAChD,UAAU,CAASD,iBAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,IAAS,eAAe;SACjC,IAAL,IAAA,CAAA;KACG;;;;;;;IAOH,sBAAA,CAAA,SAAA,CAAA,oBArBG,GAqBH,UArBG,KAAA,EAqBH;QACI,IAAI,CArBC,UAAC,CAAU,YAAC,CAAY,CAAC,GAAG,CAAA,KAAE,CAAK;QAsBxC,OArBO,IAAA,CAAK;KAsBb,CAAH;IACA,OAAA,sBAAC,CAAD;CAnCA,CAhBC,uBAAA,CAmDD,CAAA;;;;;;;;;;;;ADhHA,AAeA,IAAMA,iBAAA,GAAkB;IACtB,SAAS;CACV,CAAC;;;;AAIF,IAAA,YAAA,IAAA,UAAA,MAAA,EAAA;IACCH,WAAD,CAAA,YAAA,EAAA,MAAA,CAAA,CAAC;IADD,SAAA,YAAA,GAAA;;KAKC;IAAD,OAAA,YAAC,CAAD;CALA,CACC,eAAA,CAID,CAAA,CAAC;AAaD;;;;;AAKA,IAAA,mBAAA,IAAA,UAAA,MAAA,EAAA;IACQA,WAAR,CAAA,mBAAA,EAAA,MAAA,CAAA,CAAiC;;;;;;;IAWjC,SAAA,mBAAA,CAfG,KAAkB,EAgBP,aAfmB,EAgBnB,cAf2B,EAgB3B,QAfwB,EAYtC;QACc,IAAd,aAAA,KAAA,KAAA,CAAA,EAAc,EAAA,aAAd,GAAA,SAfiC,CAejC,EAAA;QACc,IAAd,cAAA,KAAA,KAAA,CAAA,EAAc,EAAA,cAAd,GAAA,SAfyC,CAezC,EAAA;QACc,IAAd,QAAA,KAAA,KAAA,CAAA,EAAc,EAAA,QAAd,GAAA,SAfsC,CAetC,EAAA;QACA,OAAI,MAAJ,CAAA,IAAA,CAAA,IAAA,EACM,MAAM,CAAM,EAAC,KAAK,EADxB,KACwB,EAAE,SAAS,EADnCE,eACmC,EAAE,OAAO,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAC,EAAE,aAAa,IAAI,EAAE,CAAC,EACtF,UAAU,CAASC,iBAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,IAAS,YAAY;SAC9B,IAAL,IAAA,CAAA;KACG;;;;;;;IAOH,mBAAA,CAAA,SAAA,CAAA,SApBG,GAoBH,UApBG,GAAA,EAAA,OAAA,EAAA,OAAA,EAoBH;QACI,qBApBI,GAAA,GAAM;YAqBR,QAAQ,EApBE,GAAA;YAqBV,OAAO,EApBE,OAAA;YAqBT,OAAO,EApBE,OAAA;SAqBV,CApBC;QAsBF,qBApBI,GAAA,GAAM,UAAA,CAAW,SAAC,CAAS,CAAC;QAqBhC,EAAoB,IApBlB,CAAI,GAAC,CAAuB,GAAG,IAAC,CAAI,GAAC,CAAG,CAAC;QAsB3C,OApBO,IAAA,CAAK;KAqBb,CAAH;;;;;IAKA,mBAAA,CAAA,SAAA,CAAA,WAvBG,GAuBH,UAvBG,IAAA,EAuBH;QAvBG,IAAH,IAAA,KAAA,KAAA,CAAA,EAAG,EAAA,IAAH,GAAA,IAAG,CAAH,EAAA;QAwBI,IAAI,CAvBC,SAAC,CAwBJ,uDAAuD,EACvD,IAAI,EACJ,UAAC,GAvBK,EAAW,MAAQ,EAoB/B,EApB8C,OAAA,GAAA,CAAI,MAAC,CAAM,KAAC,CAAK,GAAC,CAAG,MAAC,CAAM,OAAC,CAAO,aAAC,CAAa,CAoBhG,EApBgG,CAwB3F,CAvBC;QAwBF,OAvBO,IAAA,CAAK;KAwBb,CAAH;;;;;IAKA,mBAAA,CAAA,SAAA,CAAA,eA1BG,GA0BH,UA1BG,IAAA,EA0BH;QA1BG,IAAH,IAAA,KAAA,KAAA,CAAA,EAAG,EAAA,IAAH,GAAA,QAAG,CAAH,EAAA;QA2BI,IAAI,CA1BC,SAAC,CA2BJ,wDAAwD,EACxD,IAAI,EACJ,UAAC,GA1BK,EAAW,MAAQ,EAuB/B,EAvB8C,OAAA,GAAA,CAAI,MAAC,CAAM,OAAC,EAAO,CAuBjE,EAvBiE,CA2B5D,CA1BC;QA2BF,OA1BO,IAAA,CAAK;KA2Bb,CAAH;IACA,OAAA,mBAAC,CAAD;CAhEA,CACQ,sBAAsB,CA+D9B,CAAA;;;;;;;;;;;;AD5GA,AASA,IAAM,cAAA,GAAiB;IACrB,SAAS,EAAXD,eAAW;IACT,OAAO,EAATD,UAAS;IACP,KAAK,EAAE,IAAA;IACP,SAAS,EAAE,QAAA;CACZ,CAAC;AAEF,IAAM,eAAA,GAAkB;IACtB,OAAO;IACP,WAAW;IACX,aAAa;CACd,CAAC;;;;AAIF,IAAA,YAAA,IAAA,UAAA,MAAA,EAAA;IACCD,WAAD,CAAA,YAAA,EAAA,MAAA,CAAA,CAAC;IADD,SAAA,YAAA,GAAA;;KA8BC;IAHD,MAAA,CAAA,cAAA,CAGG,YAHH,CAAA,SAAA,EAAA,WAGG,EAHH;;;;QAAA,GAAA,EAAA,YAAA;YACI,OAGO,IAAA,CAAK,UAAC,KAAc,YAAA,CAAa,MAAC,CAAM;SAFhD;;;KAAH,CAAA,CAAG;IACH,OAAA,YAAC,CAAD;CA9BA,CACC,YAAA,CA6BD,CAAA,CAAC;AAgCD;;;AAGA,IAAA,mBAAA,IAAA,UAAA,MAAA,EAAA;IA3BCA,WAAD,CAAA,mBAAA,EAAA,MAAA,CAAA,CAAC;;;;;;IAkDD,SAAA,mBAAA,CA3BG,KAAkB,EAAO,UAAY,EAAc,aAA8B,EA2BpF;QA3BsD,IAAtD,aAAA,KAAA,KAAA,CAAA,EAAsD,EAAA,aAAtD,GAAA,SAAoF,CAApF,EAAA;QA4BA,OAAI,MAAJ,CAAA,IAAA,CAAA,IAAA,EACM,KAAK,EACL,MAAM,CAAM,MAAM,CAAC,EAAC,KAAK,EAF/B,KAE+B,EAAE,UAAU,EAF3C,UAE2C,EAAC,EAAE,cAAc,CAAC,EAAE,aAAa,IAAI,EAAE,CAAC,EAC7E,eAAe,EACf,YAAY,CACb,IALL,IAAA,CAAA;KAMG;;;;;IAKH,mBAAA,CAAA,SAAA,CAAA,YA9BG,GA8BH,UA9BG,MAAA,EA8BH;QACI,IAAI,MA9BC,CAAM,KAAC,EAAM;YA+BhB,IAAI,CA9BC,WAAC,CAAW,MAAC,CAAM,KAAC,CAAK,CAAC;SA+BhC;QAED,QAAQ,MA9BC,CAAM,UAAC;YA+Bd,KA9BK,YAAA,CAAa,MAAC;gBA+BjB,MAAM,CA9BC,aAAC,GAAe,SAAA,CAAU;YA+BnC,KA9BK,YAAA,CAAa,OAAC;gBA+BjB,IAAI,MA9BC,CAAM,SAAC,EAAU;oBA+BpB,IAAI,CA9BC,eAAC,CAAe,MAAC,CAAM,SAAC,CAAS,CAAC;iBA+BxC;gBACD,MAAM;SACT;QACD,OA9BO,MA8BX,CAAA,SAAA,CA9BiB,YAAC,CA8BlB,IAAA,CAAA,IAAA,EA9B8B,MAAC,CAAM,CAAC;KA+BnC,CAAH;IACA,OAAA,mBAAC,CAAD;CAnDA,CA3BC,mBAAA,CA8ED,CAAA;;;;;;;;;;;;AD7IA,AAEA;;;AAGA,IAAA,qBAAA,IAAA,UAAA,MAAA,EAAA;IAGCA,WAAD,CAAA,qBAAA,EAAA,MAAA,CAAA,CAAC;IAHD,SAAA,qBAAA,GAAA;;KA0CC;;;;;IAjCD,qBAAA,CAAA,SAAA,CAAA,KACG,GADH,UACG,OAAA,EADH;QACI,OAAO,CACC,gBAAC,CAAgB,IAAC,CAAI,mBAAC,CAAmB,aAAC,CAAa,CAAC;QACjE,IAAI,IACC,CAAI,MAAC,CAAM,SAAC,EAAU;YAAzB,IAAI,CACC,QAAC,CAAQ,SAAC,EAAU,YAAA,CAAa,CAAC;YAEvC,IAAI,IACC,CAAI,MAAC,CAAM,OAAC,CAAO,SAAC,KAAa,qBAAA,EAAuB;gBAA3D,IAAI,CACC,QAAC,CAAQ,YAAC,EAAa,QAAA,CAAS,CAAC;gBAAtC,IAAI,CACC,QAAC,CAAQ,eAAC,CAAe,IAAC,CAAI,mBAAC,CAAmB,aAAC,EAAc,UAAA,EAAY,UAAA,CAAW,CAAC;aAA/F;SACF;KAEF,CAAH;IAEO,qBAAP,CAAA,UAAO,GAAoC;QAA3C,EACE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;oBAAvB,QAAQ,EACE,sBAAA;oBAAV,IAAI,EACE;wBAAJ,UAAU,EACE,IAAA;wBAAZ,MAAM,EACE,QAAA;qBAAT;oBACD,aAAa,EACE,iBAAA,CAAkB,IAAC;oBAAlC,QAAQ,EACE,mGAAA;iBAAX,EACC,EAAG;KAAJ,CACC;;;;IAED,qBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAEA,CAFD,EAEC,CAAC;IAAK,qBAAP,CAAA,cAAO,GAAyD;QAEhE,qBAAqB,EADE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,eAAE,EAAgB,EAAA,IAAE,EAAK,UAAA,EAAW,EAAC,EAAG,EAAE;KAE1F,CADC;IAEF,OAAA,qBAAC,CAAD;CA1CA,CAGC,kBAAA,CAHD,CAAA;;;;;;;;;;;;ADJA,AAiBA;;AAEA,IAAM,KAAA,GAAiB,EAAE,OAAO,QAAA,KAAa,WAAA,IAAe,CAAA,QAAE,CAAQ,CAAC;AAEvE,IAAI,KAAA,GAAQ,KAAA,CAAM;;;;;AAKlB,AAAA,SAAA,SAAA,GAAA;IACE,KAAK,GADG,IAAA,CAAK;CAEd;AACD,IAAAH,OAAA,IAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAAA,QAAA,EAAA,MAAA,CAAA,CAAC;;;;IAGD,SAAAA,QAAA,CAFG,OAAoB,EAEvB;QACA,OAAI,MAAJ,CAAA,IAAA,CAAA,IAAA,EAAU,OAAO,CAAC,IAAlB,IAAA,CAAA;KACG;;;;IAIHA,QAAA,CAAA,SAAA,CAAA,KAJG,GAIH,YAAA;QACI,OAJO,IAAI,mBAAA,CAAoB,IAAC,EAAK,YAAA,CAAa,KAAC,oBAAM,EAAA,UAAE,EAAW,KAAA,EAAU,EAAI,CAAC;KAKtF,CAAH;;;;IAIAA,QAAA,CAAA,SAAA,CAAA,MANG,GAMH,YAAA;QACI,OANO,IAAI,mBAAA,CAAoB,IAAC,EAAK,YAAA,CAAa,MAAC,oBAAO;YAOxD,UAAU,EANE,IAAA;YAOZ,QAAQ,EANE,IAAA;SACN,EAAI,CAAC;KAOZ,CAAH;;;;IAIAA,QAAA,CAAA,SAAA,CAAA,OARG,GAQH,YAAA;QACI,OARO,IAAI,mBAAA,CAAoB,IAAC,EAAK,YAAA,CAAa,OAAC,oBAAQ;YASzD,UAAU,EARE,IAAA;YASZ,QAAQ,EARE,IAAA;SACN,EAAI,CAAC;KASZ,CAAH;;;;;;IANGA,QAAH,CAAA,SAAA,CAAA,MAAG,GAYH,UAZG,SAAA,EAAA,OAAA,EAAH;QAYA,IAAA,KAAA,GAAA,IAAA,CAsEG;QArEC,IAAI,KAZC,KAAS,IAAA,EAAM;YAalB,OAZO,IAAA,CAAK,QAAC,CAAQ,SAAC,EAAU,OAAA,CAAQ,CAAC;SAa1C;QAED,qBAZM,WAAA,GAAc,IAAA,CAAK,cAAC,CAAc,SAAC,EAAU,WAAA,CAAY,CAAC;QAahE,qBAZM,YAAA,GAAe,IAAA,CAAK,eAAC,CAAe,SAAC,EAAU,qBAAA,EAAuB,OAAA,CAAQ,CAAC;QAcrF,qBAZI,OAAA,GAAU,SAAA,CAAU,UAAC,CAAU,QAAC,CAAQ;QAa5C,qBAZI,QAAA,GAAW,WAAA,CAAY,QAAC,CAAQ;QAapC,qBAZI,SAAA,GAAY,YAAA,CAAa,QAAC,CAAQ;QActC,IAAI,SAZC,CAAS,SAAC,EAAU;YAavB,OAAO,CAZC,aAAC,EAAa,CAAE;YAcxB,OAAO,CAZC,iBAAC,CAAiB,UAAC,EAAW,UAAA,CAAW;iBAa9C,iBAZC,CAAiB,QAAC,EAAS,MAAA,CAAO;iBAanC,iBAZC,CAAiB,OAAC,EAAQ,MAAA,CAAO,CAAC;YActC,QAAQ,CAZC,QAAC,CAAQ,UAAC,EAAW,UAAA,CAAW;iBAatC,QAZC,CAAQ,SAAC,EAAU,OAAA,CAAQ;iBAa5B,QAZC,CAAQ,QAAC,EAAS,MAAA,CAAO;iBAa1B,QAZC,CAAQ,OAAC,EAAQ,MAAA,CAAO,CAAC;YAc7B,SAAS,CAZC,QAAC,CAAQ,UAAC,EAAW,UAAA,CAAW;iBAavC,QAZC,CAAQ,SAAC,EAAU,OAAA,CAAQ;iBAa5B,QAZC,CAAQ,QAAC,EAAS,MAAA,CAAO;iBAa1B,QAZC,CAAQ,OAAC,EAAQ,MAAA,CAAO,CAAC;SAc9B;aAZM;YAaL,OAAO,CAZC,UAAC,EAAU,CAAE;SAatB;;QAGD,IAAI,KAZC,IAAQ,CAAA,QAAE,CAAQ,IAAC,CAAI,SAAC,CAAS,QAAC,CAAQ,UAAC,CAAU,EAAE;YAa1D,QAAQ,CAZC,IAAC,CAAI,SAAC,CAAS,GAAC,CAAG,UAAC,CAAU,CAAC;SAazC;QAED,QAAQ,CAZC,QAAC,CAAQ,aAAC,CAAa,CAAC;QAajC,SAAS,CAZC,QAAC,CAAQ,gBAYvB,GAZwB,SAAiB,CAAS,OAAC,CAAO,SAAU,CAAE,CAAC;QAcnE,SAAS,CAZC,QAAC,CAAQ,SAAC,EAAU,OAAA,CAAQ,CAAC;QAcvC,IAAI,YAZC,CAAY,QAAC,CAAQ,aAAC,EAAc;YAavC,YAAY,CAZC,QAAC,CAAQ,aAAC,CAAa,KAAC,EAAK,CAAE;SAa7C;QAED,OAAO,CAZC,aAAC,CAAa,YAY1B;YACM,QAAQ,CAZC,QAAC,CAAQ,aAAC,CAAa,CAAC;YAajC,SAAS,CAZC,QAAC,CAAQ,aAAC,CAAa,CAAC;YAalC,qBAZM,SAAA,GAAY,IAAI,gBAAA,EAAsB,CAAG;YAc/C,qBAZI,aAAA,GAAiC,QAAA,CAAS,eAAC,EAAe,CAAE;;;;;YAmBhE,aAAa,CAZC,SAAC,CAAU,UAAA,OAAA,EAY/B;gBACQ,KAAK,IAZI,KAAA,CAAK,OAAC,CAAO,gBAAC,CAAgB,SAAC,CAAS,KAAK,CAAA,IAAK,QAAA,CAAS,IAAC,CAAI,SAAC,CAAS,MAAC,CAAM,UAAC,CAAU,CAAC;gBAatG,SAAS,CAZC,OAAC,EAAO,CAAE;aAarB,CAZC,CAAC;YAcH,OAZO,SAAA,CAAU,OAAC,CAAO;SAa1B,CAZC,CAAC;QAcH,SAAS,CAZC,KAAC,CAAK,OAAC,CAAO,CAAC;QAczB,OAZO,SAAA,CAAU;KAalB,CAAH;;;;;;IAVGA,QAAH,CAAA,SAAA,CAAA,QAAG,GAgBH,UAhBG,SAAA,EAAA,OAAA,EAAH;QAgBA,IAAA,KAAA,GAAA,IAAA,CAuDG;QArDC,qBAhBM,WAAA,GAAc,IAAA,CAAK,cAAC,CAAc,SAAC,EAAU,WAAA,CAAY,CAAC;QAiBhE,qBAhBM,YAAA,GAAe,IAAA,CAAK,eAAC,CAAe,SAAC,EAAU,kBAAA,EAAoB,OAAA,CAAQ,CAAC;QAkBlF,qBAhBI,OAAA,GAAU,SAAA,CAAU,UAAC,CAAU,QAAC,CAAQ;QAiB5C,qBAhBI,QAAA,GAAW,WAAA,CAAY,QAAC,CAAQ;QAiBpC,qBAhBI,SAAA,GAAY,YAAA,CAAa,QAAC,CAAQ;QAkBtC,SAAS,CAhBC,SAAC,GAAW,OAAA,CAAQ,aAAC,EAAa,GAAI,OAAA,CAAQ,UAAC,EAAU,CAAE;;QAmBrE,IAAI,KAhBC,IAAQ,CAAA,QAAE,CAAQ,IAAC,CAAI,SAAC,CAAS,QAAC,CAAQ,UAAC,CAAU,EAAE;YAiB1D,QAAQ,CAhBC,IAAC,CAAI,SAAC,CAAS,GAAC,CAAG,UAAC,CAAU,CAAC;SAiBzC;QAED,OAAO,CAhBC,QAAC,CAAQ,gBAgBrB,GAhBsB,SAAiB,CAAS,OAAC,CAAO,SAAU,CAAE,CAAC;QAiBjE,QAAQ,CAhBC,QAAC,CAAQ,aAAC,CAAa,CAAC;QAiBjC,SAAS,CAhBC,QAAC,CAAQ,SAAC,CAAS,OAAC,CAAO,gBAAC,CAAgB,CAAC;QAiBvD,SAAS,CAhBC,QAAC,CAAQ,SAAC,EAAU,OAAA,CAAQ,CAAC;QAiBvC,IAAI,SAhBC,CAAS,SAAC,EAAU;YAiBvB,OAAO,CAhBC,QAAC,CAAQ,SAAC,EAAU,GAAA,CAAI,CAAC;YAiBjC,SAAS,CAhBC,QAAC,CAAQ,YAAC,EAAa,MAAA,CAAO,CAAC;SAiB1C;QAED,IAAI,YAhBC,CAAY,QAAC,CAAQ,aAAC,EAAc;YAiBvC,YAAY,CAhBC,QAAC,CAAQ,aAAC,CAAa,KAAC,EAAK,CAAE;SAiB7C;QAED,IAAI,SAhBC,CAAS,OAAC,CAAO,SAAC,KAAa,qBAAA,EAAuB;YAiBzD,OAAO,CAhBC,QAAC,CAAQ,YAAC,EAAa,QAAA,CAAS,CAAC;YAiBzC,SAAS,CAhBC,QAAC,CAAQ,UAAC,EAAW,UAAA,CAAW,CAAC;SAiB5C;QAED,OAAO,CAhBC,aAAC,CAAa,YAgB1B;YACM,OAAO,CAhBC,QAAC,CAAQ,aAAC,CAAa,CAAC;YAiBhC,qBAhBM,SAAA,GAAY,IAAI,gBAAA,EAAsB,CAAG;YAkB/C,qBAhBI,aAAA,GAAiC,SAAA,CAAU,eAAC,EAAe,CAAE;YAiBjE,IAAI,SAhBC,CAAS,OAAC,CAAO,SAAC,KAAa,qBAAA,EAAuB;gBAiBzD,aAAa,GAhBG,aAAA,CAAc,IAAC,CAAI,aAAC,EAAc,QAAA,CAAS,eAAC,EAAe,EAAG,UAAA,EAAE,EAAG,EAAA,EAgB3F,EAhBkG,OAAA,CAAA,EAAE,EAAE,EAAC,CAAE,CAgBzG,EAhByG,CAAC,CAAE;aAiBrG;YAED,aAAa,CAhBC,SAAC,CAAU,UAAA,OAAA,EAgB/B;gBACQ,KAAK,IAhBI,KAAA,CAAK,OAAC,CAAO,gBAAC,CAAgB,SAAC,CAAS,KAAK,CAAA,IAAK,QAAA,CAAS,IAAC,CAAI,SAAC,CAAS,MAAC,CAAM,UAAC,CAAU,CAAC;gBAiBtG,SAAS,CAhBC,OAAC,EAAO,CAAE;aAiBrB,CAhBC,CAAC;YAkBH,OAhBO,SAAA,CAAU,OAAC,CAAO;SAiB1B,CAhBC,CAAC;QAmBH,OAAO,CAhBC,gBAAC,CAAgB,YAAC,CAAY,QAAC,CAAQ,aAAC,CAAa,CAAC;QAkB9D,OAhBO,SAAA,CAAU;KAiBlB,CAAH;IAfOA,QAAP,CAAA,UAAO,GAAoC;QAiB3C,EAhBE,IAAA,EAAM,UAAA,EAAW;KAiBlB,CAhBC;;;;IAEDA,QAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;QAmBD,EAAC,IAAI,EAAE,OAAO,GAAG;KAChB,CAAD,EAAC,CAAC;IACF,OAAAA,QAAC,CAAD;CAjLA,CACCE,KAAA,CADD,CAAA;;ADrBO,IAAM,SAAA,GAAmB;IAC9B,EAAE,OAAA,EAASD,KAAA,EAAW,QAAA,EAAUD,OAAA,EAAM;IACtC,EAAE,OAAA,EAASA,OAAA,EAAO,QAAA,EAAUA,OAAA,EAAM;CACnC,CAAC;AACF,IAAA,cAAA,IAAA,YAAA;IAAA,SAAA,cAAA,GAAA;KA8BC;;;;IA1BE,cAAH,CAAA,YAAG,GAAH,YAAA;QACI,OAAO,SAAA,CAAU;KAClB,CAAH;IAEO,cAAP,CAAA,UAAO,GAAoC;QAC3C,EAAE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;oBACtB,OAAO,EAAE,CAAE,WAAA,EAAa,YAAA,CAAa;oBACrC,YAAY,EAAE;wBACZ,qBAAqB;wBACrB,gBAAgB;wBAChB,UAAU;wBACV,eAAe;qBAChB;oBACD,SAAS,EAAX,SAAW;oBACT,eAAe,EAAE;wBACf,qBAAqB;wBACrB,eAAe;wBACf,UAAU;qBACX;iBACF,EAAC,EAAG;KACJ,CAAC;;;;IAED,cAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAGA,CAHD,EAGC,CAAC;IACF,OAAA,cAAC,CAAD;CA9BA,EAAA,CAAA;;ADbA;;GAEG;;;;"}