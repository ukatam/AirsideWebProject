{"version":3,"sources":["../../../../../src/ngx-modialog/plugins/vex/src/vex-css-dialog-container.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAY,SAAA,EAAW,iBAAA,EAAkB,MAAA,eAAA,CAAA;AAC7D,OAAO,EAAE,kBAAA,EAAiC,MAAA,cAAA,CAAA;AAC1C;;GAEG;AACH;IAGC,yCAAA;IAHD;;IA0CA,CAAC;IArCD;;;OAGG;IACH,qCACG,GADH,UACG,OAAA;QAAC,OAAO,CACC,gBAAC,CAAgB,IAAC,CAAI,mBAAC,CAAmB,aAAC,CAAa,CAAC;QACjE,EAAE,CAAC,CAAC,IACC,CAAI,MAAC,CAAM,SAAC,CAAS,CAAC,CAAA;YAAzB,IAAI,CACC,QAAC,CAAQ,SAAC,EAAU,YAAA,CAAa,CAAC;YAEvC,EAAE,CAAC,CAAC,IACC,CAAI,MAAC,CAAM,OAAC,CAAO,SAAC,KAAa,qBAAA,CAAsB,CAAC,CAAA;gBAA3D,IAAI,CACC,QAAC,CAAQ,YAAC,EAAa,QAAA,CAAS,CAAC;gBAAtC,IAAI,CACC,QAAC,CAAQ,eAAC,CAAe,IAAC,CAAI,mBAAC,CAAmB,aAAC,EAAc,UAAA,EAAY,UAAA,CAAW,CAAC;YAAhG,CAAC;QACH,CAAC;IAEH,CAAC;IAEI,gCAAA,GAAoC;QAA3C,EACE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;oBAAvB,QAAQ,EACE,sBAAA;oBAAV,IAAI,EACE;wBAAJ,UAAU,EACE,IAAA;wBAAZ,MAAM,EACE,QAAA;qBAAT;oBACD,aAAa,EACE,iBAAA,CAAkB,IAAC;oBAAlC,QAAQ,EACE,mGAAA;iBAAX,EACC,EAAG;KAAJ,CACC;IAAF;;OAEG;IAAF,oCAAA,GAAA,cAAA,OAAA,EAEA,EAFA,CAEA,CAAC;IAAK,oCAAA,GAAyD;QAEhE,qBAAqB,EADE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,eAAE,EAAgB,EAAA,IAAE,EAAK,UAAA,EAAW,EAAC,EAAG,EAAE;KAE1F,CADC;IAEF,4BAAC;CA1CD,AA0CC,CAvCA,kBAAA,GAuCA;SAvCA,qBAAA;AAyCD;IACA,gBAAgB;IAChB,qBAAqB,CAAC,UAAU,CAAC;IACjC;;;OAGG;IACH,qBAAqB,CAAC,cAAc,CAAC;IACrC,gBAAgB;IAChB,qBAAqB,CAAC,cAAc,CAAC;IACrC;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,mBAAmB,CAAC;AACpD,CAAC","file":"vex-css-dialog-container.js","sourceRoot":"","sourcesContent":["import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { CSSDialogContainer, ModalOverlay } from 'ngx-modialog';\n/**\n * A component that acts as a top level container for an open modal window.\n */\nexport class VexCSSDialogContainer extends CSSDialogContainer {\n/**\n * The div that wraps the content of the modal, by default use the class `vex-content`\n */\npublic vexContentContainer: ElementRef;\n/**\n * @param {?} overlay\n * @return {?}\n */\napply(overlay: ModalOverlay): void {\n    overlay.setClickBoundary(this.vexContentContainer.nativeElement);\n\n    if (this.dialog.inElement) {\n      this.setStyle('padding', '20px 0 0 0');\n\n\n      if (this.dialog.context.className === 'bottom-right-corner') {\n        this.setStyle('overflow-y', 'hidden');\n        this.renderer.setElementStyle(this.vexContentContainer.nativeElement, 'position', 'absolute');\n      }\n    }\n\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'css-dialog-container',\n  host: {\n    'tabindex': '-1',\n    'role': 'dialog'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: `<div #clickBoundary class=\"{{dialog.context.contentClassName}}\"><ng-content></ng-content></div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vexContentContainer': [{ type: ViewChild, args: ['clickBoundary', {read: ElementRef}, ] },],\n};\n}\n\nfunction VexCSSDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nVexCSSDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nVexCSSDialogContainer.ctorParameters;\n/** @type {?} */\nVexCSSDialogContainer.propDecorators;\n/**\n * The div that wraps the content of the modal, by default use the class `vex-content`\n * @type {?}\n */\nVexCSSDialogContainer.prototype.vexContentContainer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}