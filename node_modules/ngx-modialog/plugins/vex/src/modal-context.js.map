{"version":3,"sources":["../../../../../src/ngx-modialog/plugins/vex/src/modal-context.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EACL,gBAAgB,EAChB,uBAAuB,EAEvB,UAAU,EACV,MAAM,EACN,UAAU,EACX,MAAM,cAAc,CAAC;AAGtB,IAAM,gBAAgB,CAAhB,cAAA,GAAiB;IACrB,SAAS,EAAC,gBAAA,CAAA,CAAmB,SAAC,CAAA;IAC9B,gBAAgB,EAAE,aAAA;IAClB,gBAAgB,EAAE,aAAA;IAClB,cAAc,EAAE,WAAA;CACjB,CAAC;AAEF,IAAM,gBAAgB,CAAhB,eAAA,GAAkB;IACtB,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,iBAAiB;CAClB,CAAC;AAIF;IACC,mCAAA;IADD;;IAiCA,CAAC;IAtBD;;OAEG;IACH,mCAAG,GAAH;QACI,EAAE,CAAC,CAAC,CAAC,IAAC,CAAI,SAAC,CAAS,CAAC,CAAA;YACnB,IAAI,CAAC,SAAC,GAAW,cAAA,CAAe,SAAC,CAAS;QAC5C,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAC,CAAI,gBAAC,CAAgB,CAAC,CAAA;YAC1B,IAAI,CAAC,gBAAC,GAAkB,cAAA,CAAe,gBAAC,CAAgB;QAC1D,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAC,CAAI,gBAAC,CAAgB,CAAC,CAAA;YAC1B,IAAI,CAAC,gBAAC,GAAkB,cAAA,CAAe,gBAAC,CAAgB;QAC1D,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAC,CAAI,cAAC,CAAc,CAAC,CAAA;YACxB,IAAI,CAAC,cAAC,GAAgB,cAAA,CAAe,cAAC,CAAc;QACtD,CAAC;QAED,iBAAM,SAAC,WAAS,CAAE;IACpB,CAAC;IACH,sBAAC;AAAD,CAjCA,AAiCC,CAhCA,gBAAA,GAgCA;;AAED;IACA;;;OAGG;IACH,eAAe,CAAC,SAAS,CAAC,SAAS,CAAC;IACpC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAC3C,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAC3C,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,cAAc,CAAC;IACzC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC;AAC1C,CAAC;AAED;IAhBC,0CAAA;IA2BD;;;;OAIG;IACH,gCApBG,aAA8B,EAqBnB,cApB2B,EAqB3B,QApBwB;QAFnC,8BAAA,EAAA,yBAA8B;QAqBnB,+BAAA,EAAA,0BApB2B;QAqB3B,yBAAA,EAAA,oBApBwB;eAqBlC,kBACE,MAAM,CAAM,cAAc,EAAE,aAAa,IAAI,EAAE,CAAC,EAChD,UAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,IAAS,eAAe,CAAC,sDAAsD;SACxF;IACH,CAAC;IACH;;;;;OAKG;IACH,qDArBG,GAqBH,UArBG,KAAA;QAsBC,IAAI,CArBC,UAAC,CAAU,YAAC,CAAY,CAAC,GAAG,CAAA,KAAE,CAAK;QAsBxC,MAAM,CArBC,IAAA,CAAK;IAsBd,CAAC;IACH,6BAAC;AAAD,CAnCA,AAmCC,CAnDA,uBAAA,GAmDA;;AAED;IACA;;;OAGG;IACH,sBAAsB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC3C,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAClD,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAClD,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,cAAc,CAAC;IAChD,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,eAAe,CAAC;AACjD,CAAC","file":"modal-context.js","sourceRoot":"","sourcesContent":["import {\n  ModalOpenContext,\n  ModalOpenContextBuilder,\n  FluentAssignMethod,\n  privateKey,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\n\n\nconst /** @type {?} */ DEFAULT_VALUES = {\n  className: /** @type {?} */(( <VEXBuiltInThemes>'default')),\n  overlayClassName: 'vex-overlay',\n  contentClassName: 'vex-content',\n  closeClassName: 'vex-close'\n};\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n  'className',\n  'overlayClassName',\n  'contentClassName',\n  'closeClassName',\n  'showCloseButton'\n];\n\nexport type VEXBuiltInThemes\n  = 'default' | 'os' | 'plain' | 'wireframe' | 'flat-attack' | 'top' | 'bottom-right-corner';\nexport class VEXModalContext extends ModalOpenContext {\n/**\n * Set the built in schema to use.\n */\nclassName: VEXBuiltInThemes;\n\n  overlayClassName: string;\n  contentClassName: string;\n  closeClassName: string;\n\n  showCloseButton: boolean;\n/**\n * @return {?}\n */\nnormalize(): void {\n    if (!this.className) {\n      this.className = DEFAULT_VALUES.className;\n    }\n\n    if (!this.overlayClassName) {\n      this.overlayClassName = DEFAULT_VALUES.overlayClassName;\n    }\n\n    if (!this.contentClassName) {\n      this.contentClassName = DEFAULT_VALUES.contentClassName;\n    }\n\n    if (!this.closeClassName) {\n      this.closeClassName = DEFAULT_VALUES.closeClassName;\n    }\n\n    super.normalize();\n  }\n}\n\nfunction VEXModalContext_tsickle_Closure_declarations() {\n/**\n * Set the built in schema to use.\n * @type {?}\n */\nVEXModalContext.prototype.className;\n/** @type {?} */\nVEXModalContext.prototype.overlayClassName;\n/** @type {?} */\nVEXModalContext.prototype.contentClassName;\n/** @type {?} */\nVEXModalContext.prototype.closeClassName;\n/** @type {?} */\nVEXModalContext.prototype.showCloseButton;\n}\n\nexport class VEXModalContextBuilder<T extends VEXModalContext> extends ModalOpenContextBuilder<T> {\n/**\n * Set the built in schema to use.\n */\nclassName: FluentAssignMethod<VEXBuiltInThemes, this>;\n\n  overlayClassName: FluentAssignMethod<string, this>;\n  contentClassName: FluentAssignMethod<string, this>;\n  closeClassName: FluentAssignMethod<string, this>;\n\n  showCloseButton: FluentAssignMethod<boolean, this>;\n/**\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n * @param {?=} baseType\n */\nconstructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(DEFAULT_VALUES, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>VEXModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n/**\n *\n * \\@aliasFor isBlocking\n * @param {?} value\n * @return {?}\n */\noverlayClosesOnClick(value: boolean): this {\n    this[privateKey('isBlocking')] = !value;\n    return this;\n  }\n}\n\nfunction VEXModalContextBuilder_tsickle_Closure_declarations() {\n/**\n * Set the built in schema to use.\n * @type {?}\n */\nVEXModalContextBuilder.prototype.className;\n/** @type {?} */\nVEXModalContextBuilder.prototype.overlayClassName;\n/** @type {?} */\nVEXModalContextBuilder.prototype.contentClassName;\n/** @type {?} */\nVEXModalContextBuilder.prototype.closeClassName;\n/** @type {?} */\nVEXModalContextBuilder.prototype.showCloseButton;\n}\n\n"]}