{"version":3,"sources":["../../../../../src/ngx-modialog/plugins/vex/src/dialog-form-modal.ts"],"names":[],"mappings":"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","file":"dialog-form-modal.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport {\n  DialogRef,\n  ModalComponent\n} from 'ngx-modialog';\n\nimport { DialogPreset } from './presets/dialog-preset';\nimport { DropInPreset } from './presets/dropin-preset';\n\nexport interface VEXButtonHandler {\n  (cmp: ModalComponent<DialogPreset>, $event: MouseEvent): void;\n}\n\n/**\n * Interface for button definition\n */\nexport interface VEXButtonConfig {\n  cssClass: string;\n  caption: string;\n  onClick: VEXButtonHandler;\n}\n\nexport interface VEXButtonClickEvent {\n  btn: VEXButtonConfig;\n  $event: MouseEvent;\n}\n/**\n * A Dialog is a\n */\nexport class VEXDialogButtons {\n/**\n * A collection of button configurations, each configuration is a button to display.\n */\npublic buttons: VEXButtonConfig[];\n/**\n * Emitted when a button was clicked\n */\npublic onButtonClick = new EventEmitter<VEXButtonClickEvent>();\n/**\n * @param {?} btn\n * @param {?} $event\n * @return {?}\n */\nonClick(btn: any, $event: MouseEvent) {\n    $event.stopPropagation();\n    this.onButtonClick.emit({btn, $event});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'vex-dialog-buttons',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div class=\"vex-dialog-buttons\">\n    <button type=\"button\" \n         *ngFor=\"let btn of buttons;\"\n         [class]=\"btn.cssClass\"\n         (click)=\"onClick(btn, $event)\">{{btn.caption}}</button>\n</div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'buttons': [{ type: Input },],\n'onButtonClick': [{ type: Output },],\n};\n}\n\nfunction VEXDialogButtons_tsickle_Closure_declarations() {\n/** @type {?} */\nVEXDialogButtons.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nVEXDialogButtons.ctorParameters;\n/** @type {?} */\nVEXDialogButtons.propDecorators;\n/**\n * A collection of button configurations, each configuration is a button to display.\n * @type {?}\n */\nVEXDialogButtons.prototype.buttons;\n/**\n * Emitted when a button was clicked\n * @type {?}\n */\nVEXDialogButtons.prototype.onButtonClick;\n}\n\n/**\n * A Dialog with customized buttons wrapped in a form.\n * \n */\nexport class DialogFormModal implements ModalComponent<DialogPreset> {\npublic context: DialogPreset;\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: DialogRef<DialogPreset>) {\n    this.context = dialog.context;\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonButtonClick($event: VEXButtonClickEvent) {\n    $event.btn.onClick(this, $event.$event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'modal-dialog',\n  encapsulation: ViewEncapsulation.None,\n  template: `<form class=\"vex-dialog-form\">\n    <ng-container *ngComponentOutlet=\"context.content\"></ng-container>\n    <vex-dialog-buttons [buttons]=\"context.buttons\"\n                        (onButtonClick)=\"onButtonClick($event)\"></vex-dialog-buttons>\n</form>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DialogRef, },\n];\n}\n\nfunction DialogFormModal_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogFormModal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogFormModal.ctorParameters;\n/** @type {?} */\nDialogFormModal.prototype.context;\n/** @type {?} */\nDialogFormModal.prototype.dialog;\n}\n\nexport class FormDropIn implements ModalComponent<DropInPreset> {\npublic context: DropInPreset;\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: DialogRef<DropInPreset>) {\n    this.context = dialog.context;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'drop-in-dialog',\n  encapsulation: ViewEncapsulation.None,\n  template:\n`<div class=\"vex-dialog-message\">{{context.message}}</div>\n <div *ngIf=\"context.showInput\" class=\"vex-dialog-input\">\n   <input #input\n          autofocus\n          name=\"vex\" \n          type=\"text\" \n          class=\"vex-dialog-prompt-input\"\n           (change)=\"context.defaultResult = input.value\" \n          placeholder=\"{{context.placeholder}}\">\n </div>\n <div *ngIf=\"context.showCloseButton\" \n      [class]=\"context.closeClassName\"\n      (click)=\"dialog.dismiss()\"></div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DialogRef, },\n];\n}\n\nfunction FormDropIn_tsickle_Closure_declarations() {\n/** @type {?} */\nFormDropIn.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormDropIn.ctorParameters;\n/** @type {?} */\nFormDropIn.prototype.context;\n/** @type {?} */\nFormDropIn.prototype.dialog;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}