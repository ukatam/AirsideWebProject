{"version":3,"sources":["../../../../../src/ngx-modialog/plugins/vex/src/modal.ts"],"names":[],"mappings":"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","file":"modal.js","sourceRoot":"","sourcesContent":["import { Observable } from 'rxjs';\nimport { combineLatest } from 'rxjs/operator/combineLatest';\nimport { Injectable } from '@angular/core';\n\nimport {\n  ContainerContent,\n  Overlay,\n  DialogRef,\n  DROP_IN_TYPE,\n  Modal as Modal_,\n  CSSBackdrop,\n  CSSDialogContainer,\n  PromiseCompleter\n} from 'ngx-modialog';\n\nimport { DropInPresetBuilder } from './presets/dropin-preset';\nimport { VexCSSDialogContainer } from './vex-css-dialog-container';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst /** @type {?} */ isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nlet /** @type {?} */ vexV3 = false;\n/**\n * Execute this method to flag that you are working with VEX version 3.\n * @return {?}\n */\nexport function vexV3Mode(): void {\n  vexV3 = true;\n}\nexport class Modal extends Modal_ {\n/**\n * @param {?} overlay\n */\nconstructor(overlay: Overlay) {\n    super(overlay);\n  }\n/**\n * @return {?}\n */\nalert(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.alert, /** @type {?} */(( {isBlocking: false} as any)));\n  }\n/**\n * @return {?}\n */\nprompt(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.prompt, /** @type {?} */(( {\n      isBlocking: true,\n      keyboard: null\n    }  as any)));\n  }\n/**\n * @return {?}\n */\nconfirm(): DropInPresetBuilder {\n    return new DropInPresetBuilder(this, DROP_IN_TYPE.confirm, /** @type {?} */(( {\n      isBlocking: true,\n      keyboard: null\n    }  as any)));\n  }\n/**\n * @param {?} dialogRef\n * @param {?} content\n * @return {?}\n */\nprotected create(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n    if (vexV3 === true) {\n      return this.createV3(dialogRef, content);\n    }\n\n    const /** @type {?} */ backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const /** @type {?} */ containerRef = this.createContainer(dialogRef, VexCSSDialogContainer, content);\n\n    let /** @type {?} */ overlay = dialogRef.overlayRef.instance;\n    let /** @type {?} */ backdrop = backdropRef.instance;\n    let /** @type {?} */ container = containerRef.instance;\n\n    if (dialogRef.inElement) {\n      overlay.insideElement();\n\n      overlay.setContainerStyle('position', 'relative')\n        .setContainerStyle('height', '100%')\n        .setContainerStyle('width', '100%');\n\n      backdrop.setStyle('position', 'absolute')\n        .setStyle('display', 'block')\n        .setStyle('height', '100%')\n        .setStyle('width', '100%');\n\n      container.setStyle('position', 'relative')\n        .setStyle('display', 'block')\n        .setStyle('height', '100%')\n        .setStyle('width', '100%');\n\n    } else {\n      overlay.fullscreen();\n    }\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('vex-open')) {\n      document.body.classList.add('vex-open');\n    }\n\n    backdrop.addClass('vex-overlay');\n    container.addClass(`vex vex-theme-${dialogRef.context.className}`);\n\n    container.setStyle('display', 'block');\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    overlay.beforeDestroy(() => {\n      backdrop.addClass('vex-closing');\n      container.addClass('vex-closing');\n      const /** @type {?} */ completer = new PromiseCompleter<void>();\n\n      let /** @type {?} */ animationEnd$: Observable<any> = backdrop.myAnimationEnd$();\n\n      // TODO: the child element inside the container (vex-content) is the one with animation\n      // need to also wait for it to end, but this requires a reference to to it.\n      // the container itself is its parent, won't do.\n      // animationEnd$ = combineLatest.call(animationEnd$, container.myAnimationEnd$(), (s1, s2) => [s1,s2] );\n\n      animationEnd$.subscribe( sources => {\n        isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n        completer.resolve();\n      });\n\n      return completer.promise;\n    });\n\n    container.apply(overlay);\n\n    return dialogRef;\n  }\n/**\n * @param {?} dialogRef\n * @param {?} content\n * @return {?}\n */\nprivate createV3(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n\n    const /** @type {?} */ backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const /** @type {?} */ containerRef = this.createContainer(dialogRef, CSSDialogContainer, content);\n\n    let /** @type {?} */ overlay = dialogRef.overlayRef.instance;\n    let /** @type {?} */ backdrop = backdropRef.instance;\n    let /** @type {?} */ container = containerRef.instance;\n\n    dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('vex-open')) {\n      document.body.classList.add('vex-open');\n    }\n\n    overlay.addClass(`vex vex-theme-${dialogRef.context.className}`);\n    backdrop.addClass('vex-overlay');\n    container.addClass(dialogRef.context.contentClassName);\n    container.setStyle('display', 'block');\n    if (dialogRef.inElement) {\n      overlay.setStyle('padding', '0');\n      container.setStyle('margin-top', '20px');\n    }\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    if (dialogRef.context.className === 'bottom-right-corner') {\n      overlay.setStyle('overflow-y', 'hidden');\n      container.setStyle('position', 'absolute');\n    }\n\n    overlay.beforeDestroy(() => {\n      overlay.addClass('vex-closing');\n      const /** @type {?} */ completer = new PromiseCompleter<void>();\n\n      let /** @type {?} */ animationEnd$: Observable<any> = container.myAnimationEnd$();\n      if (dialogRef.context.className !== 'bottom-right-corner') {\n        animationEnd$ = combineLatest.call(animationEnd$, backdrop.myAnimationEnd$(), (s1, s2) => [s1,s2] );\n      }\n\n      animationEnd$.subscribe( sources => {\n        isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n        completer.resolve();\n      });\n\n      return completer.promise;\n    });\n\n\n    overlay.setClickBoundary(containerRef.location.nativeElement);\n\n    return dialogRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n];\n}\n\nfunction Modal_tsickle_Closure_declarations() {\n/** @type {?} */\nModal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nModal.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}