{"version":3,"sources":["../../../../../src/ngx-modialog/plugins/js-native/src/js-native-modal-renderer.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,UAAU,EACX,MAAM,eAAA,CAAgB;AAEvB,OAAO,EACL,YAAY,EAIb,MAAM,cAAA,CAAe;AACtB;IAAA;IA2CA,CAAC;IA1CD;;;;OAIG;IACH,sCAFG,GAEH,UAFG,MAAA,EAAA,KAAA;QAIC,IAAI,gBAAgB,CAFhB,MAAiB,CAAQ;QAG7B,MAAM,CAAC,CAAC,MAFC,CAAM,OAAC,CAAO,UAAC,CAAU,CAAC,CAAA;YAGjC,KAFK,YAAA,CAAa,KAAC;gBAGjB,MAAM,CAFC,KAAC,CAAK,MAAC,CAAM,OAAC,CAAO,OAAC,CAAO,CAAC;gBAGrC,MAAM,GAFG,IAAA,CAAK;gBAGd,KAAK,CAAC;YACR,KAFK,YAAA,CAAa,MAAC;gBAGjB,MAAM,GAFG,MAAA,CAAO,MAAC,CAAM,MAAC,CAAM,OAAC,CAAO,OAAC,EAAQ,MAAA,CAAO,OAAC,CAAO,aAAC,CAAa,CAAC;gBAG7E,KAAK,CAAC;YACR,KAFK,YAAA,CAAa,OAAC;gBAGjB,MAAM,GAFG,MAAA,CAAO,OAAC,CAAO,MAAC,CAAM,OAAC,CAAO,OAAC,CAAO,CAAC;gBAGhD,KAAK,CAAC;QACV,CAAC;QAED,MAAM,CAFC,OAAC,GAAS;QAGjB,CAAC,CAFC;QAIF,EAAE,CAAC,CAAC,MAFC,KAAU,KAAA,CAAM,CAAC,CAAA;YAGpB,MAAM,CAFC,OAAC,EAAO,CAAE;QAGnB,CAAC;QAFC,IAAA,CAAK,CAAA;YAGL,MAAM,CAFC,KAAC,CAAK,MAAC,CAAM,CAAC;QAGvB,CAAC;QAED,qFAAqF;QACrF,gFAAgF;QAChF,MAAM,CAAiB,CAFhB,EAAM,CAAA,CAAI;IAGnB,CAAC;IADI,gCAAA,GAAoC;QAG3C,EAFE,IAAA,EAAM,UAAA,EAAW;KAGlB,CAFC;IAGF;;OAEG;IAHF,oCAAA,GAAA,cAAA,OAAA,EAKA,EALA,CAKA,CAAC;IACF,4BAAC;CA3CD,AA2CC,IAAA;SAzCA,qBAAA;AA2CD;IACA,gBAAgB;IAChB,qBAAqB,CAAC,UAAU,CAAC;IACjC;;;OAGG;IACH,qBAAqB,CAAC,cAAc,CAAC;AACrC,CAAC","file":"js-native-modal-renderer.js","sourceRoot":"","sourcesContent":["import {\n  ViewContainerRef,\n  ComponentRef,\n  Injectable\n} from '@angular/core';\n\nimport {\n  DROP_IN_TYPE,\n  DialogRef,\n  OverlayRenderer,\n  ModalOverlay\n} from 'ngx-modialog';\nexport class JSNativeModalRenderer implements OverlayRenderer {\n/**\n * @param {?} dialog\n * @param {?} vcRef\n * @return {?}\n */\nrender(dialog: DialogRef<any>, vcRef: ViewContainerRef): ComponentRef<ModalOverlay> {\n\n    let /** @type {?} */ result: string | boolean;\n    switch (dialog.context.dialogType) {\n      case DROP_IN_TYPE.alert:\n        window.alert(dialog.context.message);\n        result = true;\n        break;\n      case DROP_IN_TYPE.prompt:\n        result = window.prompt(dialog.context.message, dialog.context.promptDefault);\n        break;\n      case DROP_IN_TYPE.confirm:\n        result = window.confirm(dialog.context.message);\n        break;\n    }\n\n    dialog.destroy = () => {\n    };\n\n    if (result === false) {\n      dialog.dismiss();\n    } else {\n      dialog.close(result);\n    }\n\n    // we need to return ComponentRef<ModalOverlay> but a native dialog does'nt have that\n    // so we resolve an empty promise, the user of this renderer should expect that.\n    return /** @type {?} */(( {} as any));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JSNativeModalRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nJSNativeModalRenderer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSNativeModalRenderer.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}