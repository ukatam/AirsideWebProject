{"version":3,"sources":["../../../../../../src/ngx-modialog/plugins/js-native/src/presets/js-native-preset.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,OAAO,EAAE,KAAA,EAAM,MAAA,UAAA,CAAA;AAEf,OAAO,EAEL,2BAA2B,EAC5B,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,qBAAA,EAAsB,MAAA,6BAAA,CAAA;AAC/B;IACC,yCAAA;IAAD;;;OAGG;IACH,+BAFG,KAAkB,EAAO,UAAY;eAGpC,kBAAW,EAAC,KAAK,OAAA,EAAE,UAAU,YAAA,EAAC,CAAC;IACjC,CAAC;IACH;;;;OAIG;IADA,4CAAA,GAEH,UAFG,MAAA;QAGC,MAAM,CAFC,EAAA,CAAG;IAGZ,CAAC;IACH;;;;OAIG;IACH,oCADG,GACH,UADG,aAAA;QAEC,IAAI,gBAAgB,CADhB,OAAA,GAAgC,IAAA,CAAK,MAAC,EAAM,CAAE;QAGlD,EAAE,CAAC,CAAC,CADC,CAAC,OAAC,CAAO,KAAC,YAAgB,KAAA,CAAM,CAAC,CAAC,CAAA;YAErC,MAAM,CAAiB,CADX,OAAC,CAAO,MAAC,CAAM,IAAI,KAAA,CAAM,6CAAC,CAA6C,CAAC,CAAA,CAAC;QAEvF,CAAC;QAED,IAAI,gBAAgB,CADhB,aAAA,GAA+B;YAEjC,OAAO,EADE,OAAA;YAET,QAAQ,EADE,IAAI,qBAAA,EAAsB;YAEpC,aAAa,EADE,aAAA;YAEf,QAAQ,EADE,OAAO,IAAA,CAAK,YAAC,KAAgB,UAAA,IAAc,IAAA,CAAK,YAAC,CAAY,OAAC,CAAO;SAEhF,CADC;QAGF,MAAM,CADC,OAAA,CAAQ,KAAC,CAAK,IAAC,CAAI,OAAC,CAAO,SAAC,EAAU,aAAA,CAAc,CAAC;IAE9D,CAAC;IACH,4BAAC;AAAD,CArCA,AAqCC,CApCA,2BAAA,GAoCA","file":"js-native-preset.js","sourceRoot":"","sourcesContent":["import { ViewContainerRef, ResolvedReflectiveProvider } from '@angular/core';\nimport { DialogRef, DROP_IN_TYPE, OverlayConfig } from 'ngx-modialog';\nimport { Modal } from '../modal';\n\nimport {\n  JSNativeModalContext,\n  JSNativeModalContextBuilder\n} from '../modal-context';\nimport { JSNativeModalRenderer } from '../js-native-modal-renderer';\nexport class JSNativePresetBuilder extends JSNativeModalContextBuilder<JSNativeModalContext> {\n/**\n * @param {?} modal\n * @param {?} dialogType\n */\nconstructor(modal: Modal, dialogType: DROP_IN_TYPE) {\n    super(<any>{modal, dialogType});\n  }\n/**\n * Hook to alter config and return bindings.\n * @param {?} config\n * @return {?}\n */\nprotected $$beforeOpen(config: JSNativeModalContext): ResolvedReflectiveProvider[] {\n    return [];\n  }\n/**\n * Open a modal window based on the configuration of this config instance.\n * @param {?=} viewContainer If set opens the modal inside the supplied viewContainer\n * @return {?} Promise<DialogRef>\n */\nopen(viewContainer?: ViewContainerRef): Promise<DialogRef<JSNativeModalContext>> {\n    let /** @type {?} */ context: JSNativeModalContext = this.toJSON();\n\n    if (!(context.modal instanceof Modal)) {\n      return /** @type {?} */(( <any>Promise.reject(new Error('Configuration Error: modal service not set.'))));\n    }\n\n    let /** @type {?} */ overlayConfig: OverlayConfig = {\n      context: context,\n      renderer: new JSNativeModalRenderer(),\n      viewContainer: viewContainer,\n      bindings: typeof this.$$beforeOpen === 'function' && this.$$beforeOpen(context)\n    };\n\n    return context.modal.open(context.component, overlayConfig);\n  }\n}\n\n"]}