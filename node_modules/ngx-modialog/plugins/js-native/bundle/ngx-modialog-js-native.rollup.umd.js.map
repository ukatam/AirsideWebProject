{"version":3,"file":"ngx-modialog-js-native.rollup.umd.js","sources":["../../../../../src/ngx-modialog/plugins/js-native/src/js-native.module.ts","../../../../../src/ngx-modialog/plugins/js-native/src/modal.ts","../../../../../src/ngx-modialog/plugins/js-native/src/presets/js-native-preset.ts","../../../../../src/ngx-modialog/plugins/js-native/src/js-native-modal-renderer.ts","../../../../../src/ngx-modialog/plugins/js-native/src/modal-context.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\n\nimport { Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\n\nexport const /** @type {?} */ providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\nexport class JSNativeModalModule {\n/**\n * @return {?}\n */\nstatic getProviders(): any[] {\n    return providers;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JSNativeModalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJSNativeModalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSNativeModalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, ResolvedReflectiveProvider as RRP } from '@angular/core';\n\nimport {\n  DialogRef,\n  Maybe,\n  Overlay,\n  DROP_IN_TYPE,\n  Modal as Modal_\n} from 'ngx-modialog';\n\nimport { JSNativePresetBuilder } from './presets/js-native-preset';\nexport class Modal extends Modal_ {\n/**\n * @param {?} overlay\n */\nconstructor(overlay: Overlay) {\n    super(overlay);\n  }\n/**\n * @return {?}\n */\nalert(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.alert);\n  }\n/**\n * @return {?}\n */\nprompt(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.prompt);\n  }\n/**\n * @return {?}\n */\nconfirm(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.confirm);\n  }\n/**\n * @param {?} dialogRef\n * @param {?} type\n * @param {?=} bindings\n * @return {?}\n */\nprotected create(dialogRef: DialogRef<any>,\n                   type: any,\n                   bindings?: RRP[]): Maybe<DialogRef<any>> {\n    return dialogRef;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n];\n}\n\nfunction Modal_tsickle_Closure_declarations() {\n/** @type {?} */\nModal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nModal.ctorParameters;\n}\n\n\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ViewContainerRef, ResolvedReflectiveProvider } from '@angular/core';\nimport { DialogRef, DROP_IN_TYPE, OverlayConfig } from 'ngx-modialog';\nimport { Modal } from '../modal';\n\nimport {\n  JSNativeModalContext,\n  JSNativeModalContextBuilder\n} from '../modal-context';\nimport { JSNativeModalRenderer } from '../js-native-modal-renderer';\nexport class JSNativePresetBuilder extends JSNativeModalContextBuilder<JSNativeModalContext> {\n/**\n * @param {?} modal\n * @param {?} dialogType\n */\nconstructor(modal: Modal, dialogType: DROP_IN_TYPE) {\n    super(<any>{modal, dialogType});\n  }\n/**\n * Hook to alter config and return bindings.\n * @param {?} config\n * @return {?}\n */\nprotected $$beforeOpen(config: JSNativeModalContext): ResolvedReflectiveProvider[] {\n    return [];\n  }\n/**\n * Open a modal window based on the configuration of this config instance.\n * @param {?=} viewContainer If set opens the modal inside the supplied viewContainer\n * @return {?} Promise<DialogRef>\n */\nopen(viewContainer?: ViewContainerRef): Promise<DialogRef<JSNativeModalContext>> {\n    let /** @type {?} */ context: JSNativeModalContext = this.toJSON();\n\n    if (!(context.modal instanceof Modal)) {\n      return /** @type {?} */(( <any>Promise.reject(new Error('Configuration Error: modal service not set.'))));\n    }\n\n    let /** @type {?} */ overlayConfig: OverlayConfig = {\n      context: context,\n      renderer: new JSNativeModalRenderer(),\n      viewContainer: viewContainer,\n      bindings: typeof this.$$beforeOpen === 'function' && this.$$beforeOpen(context)\n    };\n\n    return context.modal.open(context.component, overlayConfig);\n  }\n}\n\n","import {\n  ViewContainerRef,\n  ComponentRef,\n  Injectable\n} from '@angular/core';\n\nimport {\n  DROP_IN_TYPE,\n  DialogRef,\n  OverlayRenderer,\n  ModalOverlay\n} from 'ngx-modialog';\nexport class JSNativeModalRenderer implements OverlayRenderer {\n/**\n * @param {?} dialog\n * @param {?} vcRef\n * @return {?}\n */\nrender(dialog: DialogRef<any>, vcRef: ViewContainerRef): ComponentRef<ModalOverlay> {\n\n    let /** @type {?} */ result: string | boolean;\n    switch (dialog.context.dialogType) {\n      case DROP_IN_TYPE.alert:\n        window.alert(dialog.context.message);\n        result = true;\n        break;\n      case DROP_IN_TYPE.prompt:\n        result = window.prompt(dialog.context.message, dialog.context.promptDefault);\n        break;\n      case DROP_IN_TYPE.confirm:\n        result = window.confirm(dialog.context.message);\n        break;\n    }\n\n    dialog.destroy = () => {\n    };\n\n    if (result === false) {\n      dialog.dismiss();\n    } else {\n      dialog.close(result);\n    }\n\n    // we need to return ComponentRef<ModalOverlay> but a native dialog does'nt have that\n    // so we resolve an empty promise, the user of this renderer should expect that.\n    return /** @type {?} */(( {} as any));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JSNativeModalRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nJSNativeModalRenderer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSNativeModalRenderer.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  DROP_IN_TYPE,\n  ModalOpenContextBuilder,\n  ModalOpenContext,\n  FluentAssignMethod,\n  arrayUnion\n} from 'ngx-modialog';\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n  'promptDefault'\n];\nexport class JSNativeModalContext extends ModalOpenContext {\n  promptDefault: string;\n  dialogType: DROP_IN_TYPE;\n/**\n * @return {?}\n */\nnormalize(): void {\n    if (!this.message) this.message = '';\n    if (this.dialogType === undefined) this.dialogType = DROP_IN_TYPE.alert;\n  }\n}\n\nfunction JSNativeModalContext_tsickle_Closure_declarations() {\n/** @type {?} */\nJSNativeModalContext.prototype.promptDefault;\n/** @type {?} */\nJSNativeModalContext.prototype.dialogType;\n}\n\nexport class JSNativeModalContextBuilder<T extends JSNativeModalContext>\nextends ModalOpenContextBuilder<T> {\n/**\n * The default value for the prompt input\n */\npromptDefault: FluentAssignMethod<string, this>;\n/**\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n * @param {?=} baseType\n */\nconstructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      defaultValues || <any>{},\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>JSNativeModalContext\n      // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n}\n\nfunction JSNativeModalContextBuilder_tsickle_Closure_declarations() {\n/**\n * The default value for the prompt input\n * @type {?}\n */\nJSNativeModalContextBuilder.prototype.promptDefault;\n}\n\n"],"names":["NgModule","Modal","BaseModal","Modal_","Overlay","Injectable","DROP_IN_TYPE","__extends","ModalOpenContextBuilder","arrayUnion","ModalOpenContext"],"mappings":"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"}