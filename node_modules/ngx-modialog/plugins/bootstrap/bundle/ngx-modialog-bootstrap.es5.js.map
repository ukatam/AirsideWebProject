{"version":3,"file":"ngx-modialog-bootstrap.es5.js","sources":["../../../../../src/ngx-modialog/plugins/bootstrap/src/ngx-modialog-bootstrap.ng-flat.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/bootstrap.module.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/modal.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/presets/two-button-preset.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/presets/one-button-preset.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/presets/message-modal-preset.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/message-modal.component.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/modal-container.component.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/modal-context.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {BootstrapModalSize,BSModalContext,BSModalContextBuilder,BSModalContainer,BSMessageModal,BSMessageModalTitle,BSMessageModalBody,BSModalFooter,BSMessageModalButtonConfig,BSMessageModalButtonHandler,MessageModalPreset,MessageModalPresetBuilder,ModalOpenContext,ModalOpenContextBuilder,OneButtonPreset,OneButtonPresetBuilder,TwoButtonPreset,TwoButtonPresetBuilder,PromptPreset,PromptPresetBuilder,Modal,bootstrap4Mode,BootstrapModalModule,providers} from './bootstrap';\n\nexport {AbstractTwoButtonPresetBuilder as Éµa} from './presets/two-button-preset';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ModalModule, Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\nimport { BSModalContainer } from './modal-container.component';\nimport {\n  BSMessageModal,\n  BSMessageModalTitle,\n  BSMessageModalBody,\n  BSModalFooter\n} from './message-modal.component';\n\nexport const /** @type {?} */ providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\nexport class BootstrapModalModule {\n/**\n * @return {?}\n */\nstatic getProviders(): any[] {\n    return providers;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [ ModalModule, CommonModule ],\n  declarations: [\n    BSModalFooter,\n    BSMessageModalTitle,\n    BSMessageModalBody,\n    BSMessageModal,\n    BSModalContainer\n  ],\n  providers,\n  entryComponents: [\n    BSModalContainer,\n    BSMessageModal\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BootstrapModalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBootstrapModalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBootstrapModalModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { combineLatest } from 'rxjs/operator/combineLatest';\n\nimport {\n  Injectable,\n  ResolvedReflectiveProvider as RRP\n} from '@angular/core';\n\nimport {\n  Maybe,\n  ContainerContent,\n  Overlay,\n  DialogRef,\n  Modal as Modal_,\n  CSSBackdrop,\n  PromiseCompleter\n} from 'ngx-modialog';\n\nimport { BSModalContainer } from './modal-container.component';\n\nimport { OneButtonPresetBuilder } from './presets/one-button-preset';\nimport { TwoButtonPresetBuilder, PromptPresetBuilder } from './presets/two-button-preset';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst /** @type {?} */ isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nlet /** @type {?} */ animationClass: string = 'in';\n/**\n * Execute this method to flag that you are working with Bootstrap version 4.\n * @return {?}\n */\nexport function bootstrap4Mode(): void {\n  animationClass = 'show';\n}\nexport class Modal extends Modal_ {\n/**\n * @param {?} overlay\n */\nconstructor(overlay: Overlay) {\n    super(overlay);\n  }\n/**\n * @return {?}\n */\nalert(): OneButtonPresetBuilder {\n    return new OneButtonPresetBuilder(this, /** @type {?} */(( <any>{isBlocking: false})));\n  }\n/**\n * @return {?}\n */\nprompt(): PromptPresetBuilder {\n    return new PromptPresetBuilder(this, /** @type {?} */(( <any>{isBlocking: true, keyboard: null})));\n  }\n/**\n * @return {?}\n */\nconfirm(): TwoButtonPresetBuilder {\n    return new TwoButtonPresetBuilder(this, /** @type {?} */(( <any>{isBlocking: true, keyboard: null})));\n  }\n/**\n * @param {?} dialogRef\n * @param {?} content\n * @param {?=} bindings\n * @return {?}\n */\nprotected create(dialogRef: DialogRef<any>,\n                   content: ContainerContent,\n                   bindings?: RRP[]): Maybe<DialogRef<any>> {\n\n    const /** @type {?} */ backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const /** @type {?} */ containerRef = this.createContainer(dialogRef, BSModalContainer, content, bindings);\n\n    let /** @type {?} */ overlay = dialogRef.overlayRef.instance;\n    let /** @type {?} */ backdrop = backdropRef.instance;\n    let /** @type {?} */ container = containerRef.instance;\n\n    dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('modal-open')) {\n      document.body.classList.add('modal-open');\n    }\n\n\n    if (dialogRef.inElement) {\n      backdrop.setStyle('position', 'absolute');\n    }\n    backdrop.addClass('modal-backdrop fade', true);\n\n    backdrop.addClass(animationClass);\n    container.addClass(animationClass);\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    overlay.beforeDestroy(() => {\n      const /** @type {?} */ completer = new PromiseCompleter<void>();\n      backdrop.removeClass(animationClass);\n      container.removeClass(animationClass);\n\n      combineLatest.call(backdrop.myAnimationEnd$(), container.myAnimationEnd$(), (s1, s2) => [s1,s2])\n        .subscribe( sources => {\n          isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('modal-open');\n          completer.resolve();\n        });\n\n      return completer.promise;\n    });\n\n    return dialogRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n];\n}\n\nfunction Modal_tsickle_Closure_declarations() {\n/** @type {?} */\nModal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nModal.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ResolvedReflectiveProvider } from '@angular/core';\nimport {\n  Modal,\n  FluentAssignMethod,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport { BSMessageModal } from '../message-modal.component';\nimport { MessageModalPresetBuilder } from './message-modal-preset';\nimport { OneButtonPreset } from './one-button-preset';\n\n\nexport interface TwoButtonPreset extends OneButtonPreset {\n  /**\n   * Caption for the Cancel button.\n   * Default: Cancel\n   */\n  cancelBtn: string;\n\n  /**\n   * A Class for the Cancel button.\n   * Default: btn btn-default\n   */\n  cancelBtnClass: string;\n}\n/**\n * Common two button preset\n * @abstract\n */\nexport abstract class AbstractTwoButtonPresetBuilder extends MessageModalPresetBuilder<TwoButtonPreset> {\n  okBtn: FluentAssignMethod<string, this>;\n  okBtnClass: FluentAssignMethod<string, this>;\n  cancelBtn: FluentAssignMethod<string, this>;\n  cancelBtnClass: FluentAssignMethod<string, this>;\n/**\n * @param {?} modal\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n */\nconstructor(modal: Modal, defaultValues: TwoButtonPreset = undefined,\n              initialSetters: string[] = []) {\n    super(extend<any>({\n      modal: modal,\n      okBtn: 'OK',\n      okBtnClass: 'btn btn-primary',\n      cancelBtn: 'Cancel',\n      cancelBtnClass: 'btn btn-default'\n    }, defaultValues || {}), arrayUnion<string>([\n      'okBtn',\n      'okBtnClass',\n      'cancelBtn',\n      'cancelBtnClass',\n    ], initialSetters));\n  }\n/**\n * @param {?} config\n * @return {?}\n */\n$$beforeOpen(config: TwoButtonPreset): ResolvedReflectiveProvider[] {\n    this.addButton(\n      config.cancelBtnClass,\n      config.cancelBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) => cmp.dialog.dismiss()\n    );\n\n    return super.$$beforeOpen(config);\n  }\n}\n\nfunction AbstractTwoButtonPresetBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nAbstractTwoButtonPresetBuilder.prototype.okBtn;\n/** @type {?} */\nAbstractTwoButtonPresetBuilder.prototype.okBtnClass;\n/** @type {?} */\nAbstractTwoButtonPresetBuilder.prototype.cancelBtn;\n/** @type {?} */\nAbstractTwoButtonPresetBuilder.prototype.cancelBtnClass;\n}\n\n/**\n * A Preset for a classic 2 button modal window.\n */\nexport class TwoButtonPresetBuilder extends AbstractTwoButtonPresetBuilder {\n/**\n * @param {?} modal\n * @param {?=} defaultValues\n */\nconstructor(modal: Modal, defaultValues: TwoButtonPreset = undefined) {\n    super(modal, defaultValues);\n  }\n/**\n * @param {?} config\n * @return {?}\n */\n$$beforeOpen(config: TwoButtonPreset): ResolvedReflectiveProvider[] {\n    this.addButton(\n      config.okBtnClass,\n      config.okBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) => cmp.dialog.close(true)\n    );\n\n    return super.$$beforeOpen(config);\n  }\n}\n\nexport interface PromptPreset extends TwoButtonPreset {\n  showInput: boolean;\n  /** Default value shown in the prompt. */\n  defaultValue: string;\n  /** A placeholder for the input element. */\n  placeholder: string;\n\n}\nexport class PromptPresetBuilder extends AbstractTwoButtonPresetBuilder {\n  placeholder: FluentAssignMethod<string, this>;\n  defaultValue: FluentAssignMethod<string, this>;\n/**\n * @param {?} modal\n * @param {?=} defaultValues\n */\nconstructor(modal: Modal, defaultValues: PromptPreset = undefined) {\n    super(modal, extend<any>({showInput: true, defaultValue: ''}, defaultValues || {}),\n      ['placeholder', 'defaultValue']);\n  }\n/**\n * @param {?} config\n * @return {?}\n */\n$$beforeOpen(config: PromptPreset): ResolvedReflectiveProvider[] {\n    this.addButton(\n      config.okBtnClass,\n      config.okBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) =>\n        cmp.dialog.close(( /** @type {?} */((cmp.dialog.context as PromptPreset))).defaultValue)\n    );\n\n    return super.$$beforeOpen(config);\n  }\n}\n\nfunction PromptPresetBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nPromptPresetBuilder.prototype.placeholder;\n/** @type {?} */\nPromptPresetBuilder.prototype.defaultValue;\n}\n\n\n","import { ResolvedReflectiveProvider } from '@angular/core';\nimport { Modal, FluentAssignMethod, extend } from 'ngx-modialog';\nimport { BSMessageModal } from '../message-modal.component';\nimport { MessageModalPresetBuilder, MessageModalPreset } from './message-modal-preset';\n\nexport interface OneButtonPreset extends MessageModalPreset {\n  /**\n   * Caption for the OK button.\n   * Default: OK\n   */\n  okBtn: string;\n\n  /**\n   * A Class for the OK button.\n   * Default: btn btn-primary\n   */\n  okBtnClass: string;\n}\n/**\n * A Preset for a classic 1 button modal window.\n */\nexport class OneButtonPresetBuilder extends MessageModalPresetBuilder<OneButtonPreset> {\n  okBtn: FluentAssignMethod<string, this>;\n  okBtnClass: FluentAssignMethod<string, this>;\n/**\n * @param {?} modal\n * @param {?=} defaultValues\n */\nconstructor(modal: Modal, defaultValues: OneButtonPreset = undefined) {\n    super(extend<any>({\n      modal: modal,\n      okBtn: 'OK',\n      okBtnClass: 'btn btn-primary'\n    }, defaultValues || {}), [\n      'okBtn',\n      'okBtnClass'\n    ]);\n  }\n/**\n * @param {?} config\n * @return {?}\n */\n$$beforeOpen(config: OneButtonPreset): ResolvedReflectiveProvider[] {\n    this.addButton(\n      config.okBtnClass,\n      config.okBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) => cmp.dialog.close(true)\n    );\n    return super.$$beforeOpen(config);\n  }\n}\n\nfunction OneButtonPresetBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOneButtonPresetBuilder.prototype.okBtn;\n/** @type {?} */\nOneButtonPresetBuilder.prototype.okBtnClass;\n}\n\n\n","import {\n  FluentAssignMethod,\n  privateKey,\n  setAssignAlias,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport {\n  BSMessageModal,\n  BSMessageModalButtonConfig,\n  BSMessageModalButtonHandler\n} from '../message-modal.component';\nimport { BSModalContext, BSModalContextBuilder } from '../modal-context';\n\n\nconst /** @type {?} */ DEFAULT_VALUES = {\n  component: BSMessageModal,\n  headerClass: 'modal-header',\n  bodyClass: 'modal-body',\n  footerClass: 'modal-footer'\n};\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n  'headerClass',\n  'title',\n  'titleHtml',\n  'bodyClass',\n  'footerClass'\n];\n\n\n/**\n * Data definition\n */\nexport interface MessageModalPreset extends BSModalContext {\n\n  /**\n   * A Class for the header (title) container.\n   * Default: modal-header\n   */\n  headerClass: string;\n\n  /**\n   * Caption for the title, enclosed in a H3 container.\n   */\n  title: string;\n\n  /**\n   * HTML for the title, if set overrides title property.\n   * The HTML is wrapped in a DIV element, inside the header container.\n   * Example:\n   <div class=\"modal-header\">\n   <div> HTML CONTENT INSERTED HERE </div>\n   </div>\n   * Note: HTML is not compiled.\n   */\n  titleHtml: string;\n\n  /**\n   * aliased by 'body'\n   * @aliasedBy body\n   */\n  message: string;\n\n  /**\n   * The body of the modal.\n   * Can be either text or HTML.\n   * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n   * @aliasOf message\n   */\n  body: string;\n\n  /**\n   * A Class for the body container.\n   * Default: modal-body\n   */\n  bodyClass: string;\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  footerClass: string;\n\n  buttons: BSMessageModalButtonConfig[];\n  showInput?: any;\n}\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n * @abstract\n */\nexport abstract class MessageModalPresetBuilder<T extends MessageModalPreset>\n                                                extends BSModalContextBuilder<T> {\n/**\n * A Class for the header (title) container.\n * Default: modal-header\n */\nheaderClass: FluentAssignMethod<string, this>;\n/**\n * Caption for the title, enclosed in a H3 container.\n */\ntitle: FluentAssignMethod<string, this>;\n/**\n * HTML for the title, if set overrides title property.\n * The HTML is wrapped in a DIV element, inside the header container.\n * Example:\n * <div class=\"modal-header\">\n * <div> HTML CONTENT INSERTED HERE </div>\n * </div>\n * Note: HTML is not compiled.\n */\ntitleHtml: FluentAssignMethod<string, this>;\n/**\n * aliased by 'body'\n * \\@aliasedBy body\n */\nmessage: FluentAssignMethod<string, this>;\n/**\n * The body of the modal.\n * Can be either text or HTML.\n * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n * \\@aliasOf message\n */\nbody: FluentAssignMethod<string, this>;\n/**\n * A Class for the body container.\n * Default: modal-body\n */\nbodyClass: FluentAssignMethod<string, this>;\n/**\n * A Class for the footer container.\n * Default: modal-footer\n */\nfooterClass: FluentAssignMethod<string, this>;\n/**\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n * @param {?=} baseType\n */\nconstructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(extend({buttons: []}, DEFAULT_VALUES), defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType\n    );\n\n    setAssignAlias(this, 'body', 'message', true);\n  }\n/**\n * @param {?} css\n * @param {?} caption\n * @param {?} onClick\n * @return {?}\n */\naddButton(css: string, caption: string, onClick: BSMessageModalButtonHandler): this {\n    let /** @type {?} */ btn = {\n      cssClass: css,\n      caption: caption,\n      onClick: onClick\n    };\n\n    let /** @type {?} */ key = privateKey('buttons');\n    ( /** @type {?} */((this[key] as BSMessageModalButtonConfig[]))).push(btn);\n\n    return this;\n  }\n}\n\nfunction MessageModalPresetBuilder_tsickle_Closure_declarations() {\n/**\n * A Class for the header (title) container.\n * Default: modal-header\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.headerClass;\n/**\n * Caption for the title, enclosed in a H3 container.\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.title;\n/**\n * HTML for the title, if set overrides title property.\n * The HTML is wrapped in a DIV element, inside the header container.\n * Example:\n * <div class=\"modal-header\">\n * <div> HTML CONTENT INSERTED HERE </div>\n * </div>\n * Note: HTML is not compiled.\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.titleHtml;\n/**\n * aliased by 'body'\n * \\@aliasedBy body\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.message;\n/**\n * The body of the modal.\n * Can be either text or HTML.\n * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n * \\@aliasOf message\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.body;\n/**\n * A Class for the body container.\n * Default: modal-body\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.bodyClass;\n/**\n * A Class for the footer container.\n * Default: modal-footer\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.footerClass;\n}\n\n","import { Component, ViewEncapsulation } from '@angular/core';\n\nimport { DialogRef, ModalComponent } from 'ngx-modialog';\n\nimport { MessageModalPreset } from './presets/message-modal-preset';\n\nexport interface BSMessageModalButtonHandler {\n  (cmp: ModalComponent<MessageModalPreset>, $event: MouseEvent): void;\n}\n\n/**\n * Interface for button definition\n */\nexport interface BSMessageModalButtonConfig {\n  cssClass: string;\n  caption: string;\n  onClick: BSMessageModalButtonHandler;\n}\nexport class BSMessageModalTitle {\npublic context: MessageModalPreset;\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: DialogRef<MessageModalPreset>) {\n    this.context = dialog.context;\n  }\n/**\n * @return {?}\n */\nget titleHtml(): number {\n    return this.context.titleHtml ? 1 : 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'modal-title',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div [ngClass]=\"context.headerClass\" [ngSwitch]=\"titleHtml\">\n      <button *ngIf=\"context.showClose\" type=\"button\" class=\"close\" \n              aria-label=\"Close\" (click)=\"dialog.dismiss()\">\n          <span aria-hidden=\"true\">Ã</span>\n      </button>\n      <div *ngSwitchCase=\"1\" [innerHtml]=\"context.titleHtml\"></div>\n      <h3 *ngSwitchDefault class=\"modal-title\">{{context.title}}</h3>\n </div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DialogRef, },\n];\n}\n\nfunction BSMessageModalTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nBSMessageModalTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBSMessageModalTitle.ctorParameters;\n/** @type {?} */\nBSMessageModalTitle.prototype.context;\n/** @type {?} */\nBSMessageModalTitle.prototype.dialog;\n}\n\nexport class BSMessageModalBody {\npublic context: MessageModalPreset;\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: DialogRef<MessageModalPreset>) {\n    this.context = dialog.context;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'modal-body',\n  encapsulation: ViewEncapsulation.None,\n  styles: [`.form-group {\n    margin-top: 10px;\n  }`],\n  template: `<div [ngClass]=\"context.bodyClass\"> \n    <div [innerHtml]=\"context.message\"></div>\n      <div *ngIf=\"context.showInput\" class=\"form-group\">\n        <input autofocus #input\n            name=\"bootstrap\" \n            type=\"text\" \n            class=\"form-control\"\n            [value]=\"context.defaultValue\"\n            (change)=\"context.defaultValue = input.value\"  \n            placeholder=\"{{context.placeholder}}\">\n      </div>\n    </div>\n`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DialogRef, },\n];\n}\n\nfunction BSMessageModalBody_tsickle_Closure_declarations() {\n/** @type {?} */\nBSMessageModalBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBSMessageModalBody.ctorParameters;\n/** @type {?} */\nBSMessageModalBody.prototype.context;\n/** @type {?} */\nBSMessageModalBody.prototype.dialog;\n}\n\n/**\n * Represents the modal footer for storing buttons.\n */\nexport class BSModalFooter {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: DialogRef<MessageModalPreset>) {\n  }\n/**\n * @param {?} btn\n * @param {?} $event\n * @return {?}\n */\nonClick(btn: BSMessageModalButtonConfig, $event: MouseEvent) {\n    $event.stopPropagation();\n    btn.onClick(this, $event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'modal-footer',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div [ngClass]=\"dialog.context.footerClass\">\n    <button *ngFor=\"let btn of dialog.context.buttons;\"\n            [ngClass]=\"btn.cssClass\"\n            (click)=\"onClick(btn, $event)\">{{btn.caption}}</button>\n</div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DialogRef, },\n];\n}\n\nfunction BSModalFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nBSModalFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBSModalFooter.ctorParameters;\n/** @type {?} */\nBSModalFooter.prototype.dialog;\n}\n\n/**\n * A Component representing a generic bootstrap modal content element.\n * \n * By configuring a MessageModalContext instance you can:\n * \n *  Header:\n *      - Set header container class (default: modal-header)\n *      - Set title text (enclosed in H3 element)\n *      - Set title html (overrides text)\n * \n *  Body:\n *      - Set body container class.  (default: modal-body)\n *      - Set body container HTML.\n * \n *  Footer:\n *      - Set footer class.  (default: modal-footer)\n *      - Set button configuration (from 0 to n)\n */\nexport class BSMessageModal implements ModalComponent<MessageModalPreset> {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: DialogRef<MessageModalPreset>) {\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'modal-content',\n  encapsulation: ViewEncapsulation.None,\n  template: `<modal-title></modal-title><modal-body></modal-body><modal-footer></modal-footer>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DialogRef, },\n];\n}\n\nfunction BSMessageModal_tsickle_Closure_declarations() {\n/** @type {?} */\nBSMessageModal.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBSMessageModal.ctorParameters;\n/** @type {?} */\nBSMessageModal.prototype.dialog;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n  Renderer\n} from '@angular/core';\n\nimport { BaseDynamicComponent, DialogRef } from 'ngx-modialog';\n\nimport { MessageModalPreset } from './presets/message-modal-preset';\nexport class BSModalContainer extends BaseDynamicComponent {\n/**\n * @param {?} dialog\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(public dialog: DialogRef<MessageModalPreset>,\n              el: ElementRef, renderer: Renderer) {\n    super(el, renderer);\n    this.activateAnimationListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'bs-modal-container',\n  host: {\n    'tabindex': '-1',\n    'role': 'dialog',\n    'class': 'modal fade',\n    'style': 'position: absolute; display: block'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template:\n`<div [ngClass]=\"dialog.context.dialogClass\" \n      [class.modal-lg]=\"dialog.context.size == \\'lg\\'\"\n      [class.modal-sm]=\"dialog.context.size == \\'sm\\'\">\n  <div class=\"modal-content\" style=\"display:block\" role=\"document\" overlayDialogBoundary>\n    <ng-content></ng-content>\n  </div>    \n</div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DialogRef, },\n{type: ElementRef, },\n{type: Renderer, },\n];\n}\n\nfunction BSModalContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nBSModalContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBSModalContainer.ctorParameters;\n/** @type {?} */\nBSModalContainer.prototype.dialog;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ModalOpenContext,\n  ModalOpenContextBuilder,\n  FluentAssignMethod,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\n\nconst /** @type {?} */ DEFAULT_VALUES = {\n    dialogClass: 'modal-dialog',\n    showClose: false\n};\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n    'dialogClass',\n    'size',\n    'showClose'\n];\n\n\nexport type BootstrapModalSize = 'sm' | 'lg';\nexport class BSModalContext extends ModalOpenContext {\n/**\n * A Class for the modal dialog container.\n * Default: modal-dialog\n */\ndialogClass: string;\n/**\n * Size of the modal. 'lg' or 'sm' only.\n * \n * If you want to use custom sizes leave this empty and set the dialogClass property.\n * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n * NOTE: No validation.\n * Default: ''\n */\nsize: BootstrapModalSize;\n/**\n * When true, show a close button on the top right corner.\n */\nshowClose: boolean;\n/**\n * @return {?}\n */\nnormalize(): void {\n        if (!this.dialogClass) {\n            this.dialogClass = DEFAULT_VALUES.dialogClass;\n        }\n\n        super.normalize();\n    }\n}\n\nfunction BSModalContext_tsickle_Closure_declarations() {\n/**\n * A Class for the modal dialog container.\n * Default: modal-dialog\n * @type {?}\n */\nBSModalContext.prototype.dialogClass;\n/**\n * Size of the modal. 'lg' or 'sm' only.\n * \n * If you want to use custom sizes leave this empty and set the dialogClass property.\n * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n * NOTE: No validation.\n * Default: ''\n * @type {?}\n */\nBSModalContext.prototype.size;\n/**\n * When true, show a close button on the top right corner.\n * @type {?}\n */\nBSModalContext.prototype.showClose;\n}\n\nexport class BSModalContextBuilder<T extends BSModalContext> extends ModalOpenContextBuilder<T> {\n/**\n * A Class for the modal dialog container.\n * Default: modal-dialog\n */\ndialogClass: FluentAssignMethod<string, this>;\n/**\n * Size of the modal. 'lg' or 'sm' only.\n * \n * If you want to use custom sizes leave this empty and set the dialogClass property.\n * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n * NOTE: No validation.\n * Default: ''\n */\nsize: FluentAssignMethod<BootstrapModalSize, this>;\n/**\n * When true, show a close button on the top right corner.\n */\nshowClose: FluentAssignMethod<boolean, this>;\n/**\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n * @param {?=} baseType\n */\nconstructor(\n        defaultValues: T = undefined,\n        initialSetters: string[] = undefined,\n        baseType: any = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType || <any>BSModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n        );\n    }\n}\n\nfunction BSModalContextBuilder_tsickle_Closure_declarations() {\n/**\n * A Class for the modal dialog container.\n * Default: modal-dialog\n * @type {?}\n */\nBSModalContextBuilder.prototype.dialogClass;\n/**\n * Size of the modal. 'lg' or 'sm' only.\n * \n * If you want to use custom sizes leave this empty and set the dialogClass property.\n * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n * NOTE: No validation.\n * Default: ''\n * @type {?}\n */\nBSModalContextBuilder.prototype.size;\n/**\n * When true, show a close button on the top right corner.\n * @type {?}\n */\nBSModalContextBuilder.prototype.showClose;\n}\n\n\n"],"names":["Modal","BaseModal","Modal_","__extends","DEFAULT_VALUES","DEFAULT_SETTERS"],"mappings":"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"}