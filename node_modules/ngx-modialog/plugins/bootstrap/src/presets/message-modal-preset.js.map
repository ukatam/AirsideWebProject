{"version":3,"sources":["../../../../../../src/ngx-modialog/plugins/bootstrap/src/presets/message-modal-preset.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAEL,UAAU,EACV,cAAc,EACd,MAAM,EACN,UAAU,EACX,MAAM,cAAc,CAAC;AACtB,OAAO,EACL,cAAc,EAGf,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAkB,qBAAA,EAAsB,MAAA,kBAAA,CAAA;AAG/C,IAAM,gBAAgB,CAAhB,cAAA,GAAiB;IACrB,SAAS,EAAE,cAAA;IACX,WAAW,EAAE,cAAA;IACb,SAAS,EAAE,YAAA;IACX,WAAW,EAAE,cAAA;CACd,CAAC;AAEF,IAAM,gBAAgB,CAAhB,eAAA,GAAkB;IACtB,aAAa;IACb,OAAO;IACP,WAAW;IACX,WAAW;IACX,aAAa;CACd,CAAC;AA2DF;;;;;GAKG;AACH;IACwD,6CAAwB;IA0ChF;;;;OAIG;IACH,mCAGG,aAA8B,EAFnB,cAG2B,EAF3B,QAGwB;QAFnC,8BAAA,EAAA,yBAA8B;QAFnB,+BAAA,EAAA,0BAG2B;QAF3B,yBAAA,EAAA,oBAGwB;QALtC,YAGI,kBACE,MAAM,CAAM,MAAM,CAAC,EAAC,OAAO,EAAE,EAAE,EAAC,EAAE,cAAc,CAAC,EAAE,aAAa,IAAI,EAAE,CAAC,EACvE,UAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACT,SAGF;QADC,cAAc,CAAC,KAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;;IAChD,CAAC;IACH;;;;;OAKG;IACH,6CAFG,GAEH,UAFG,GAAA,EAAA,OAAA,EAAA,OAAA;QAGC,IAAI,gBAAgB,CAFhB,GAAA,GAAM;YAGR,QAAQ,EAFE,GAAA;YAGV,OAAO,EAFE,OAAA;YAGT,OAAO,EAFE,OAAA;SAGV,CAFC;QAIF,IAAI,gBAAgB,CAFhB,GAAA,GAAM,UAAA,CAAW,SAAC,CAAS,CAAC;QAGhC,CAAkB,CAAE,IAFlB,CAAI,GAAC,CAAkC,CAAA,CAAE,CAAC,IAAC,CAAI,GAAC,CAAG,CAAC;QAItD,MAAM,CAFC,IAAA,CAAK;IAGd,CAAC;IACH,gCAAC;AAAD,CA7EA,AA6EC,CA5EuD,qBAAqB,GA4E5E;;AAED;IACA;;;;OAIG;IACH,yBAAyB,CAAC,SAAS,CAAC,WAAW,CAAC;IAChD;;;OAGG;IACH,yBAAyB,CAAC,SAAS,CAAC,KAAK,CAAC;IAC1C;;;;;;;;;OASG;IACH,yBAAyB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC9C;;;;OAIG;IACH,yBAAyB,CAAC,SAAS,CAAC,OAAO,CAAC;IAC5C;;;;;;OAMG;IACH,yBAAyB,CAAC,SAAS,CAAC,IAAI,CAAC;IACzC;;;;OAIG;IACH,yBAAyB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC9C;;;;OAIG;IACH,yBAAyB,CAAC,SAAS,CAAC,WAAW,CAAC;AAChD,CAAC","file":"message-modal-preset.js","sourceRoot":"","sourcesContent":["import {\n  FluentAssignMethod,\n  privateKey,\n  setAssignAlias,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport {\n  BSMessageModal,\n  BSMessageModalButtonConfig,\n  BSMessageModalButtonHandler\n} from '../message-modal.component';\nimport { BSModalContext, BSModalContextBuilder } from '../modal-context';\n\n\nconst /** @type {?} */ DEFAULT_VALUES = {\n  component: BSMessageModal,\n  headerClass: 'modal-header',\n  bodyClass: 'modal-body',\n  footerClass: 'modal-footer'\n};\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n  'headerClass',\n  'title',\n  'titleHtml',\n  'bodyClass',\n  'footerClass'\n];\n\n\n/**\n * Data definition\n */\nexport interface MessageModalPreset extends BSModalContext {\n\n  /**\n   * A Class for the header (title) container.\n   * Default: modal-header\n   */\n  headerClass: string;\n\n  /**\n   * Caption for the title, enclosed in a H3 container.\n   */\n  title: string;\n\n  /**\n   * HTML for the title, if set overrides title property.\n   * The HTML is wrapped in a DIV element, inside the header container.\n   * Example:\n   <div class=\"modal-header\">\n   <div> HTML CONTENT INSERTED HERE </div>\n   </div>\n   * Note: HTML is not compiled.\n   */\n  titleHtml: string;\n\n  /**\n   * aliased by 'body'\n   * @aliasedBy body\n   */\n  message: string;\n\n  /**\n   * The body of the modal.\n   * Can be either text or HTML.\n   * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n   * @aliasOf message\n   */\n  body: string;\n\n  /**\n   * A Class for the body container.\n   * Default: modal-body\n   */\n  bodyClass: string;\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  footerClass: string;\n\n  buttons: BSMessageModalButtonConfig[];\n  showInput?: any;\n}\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n * @abstract\n */\nexport abstract class MessageModalPresetBuilder<T extends MessageModalPreset>\n                                                extends BSModalContextBuilder<T> {\n/**\n * A Class for the header (title) container.\n * Default: modal-header\n */\nheaderClass: FluentAssignMethod<string, this>;\n/**\n * Caption for the title, enclosed in a H3 container.\n */\ntitle: FluentAssignMethod<string, this>;\n/**\n * HTML for the title, if set overrides title property.\n * The HTML is wrapped in a DIV element, inside the header container.\n * Example:\n * <div class=\"modal-header\">\n * <div> HTML CONTENT INSERTED HERE </div>\n * </div>\n * Note: HTML is not compiled.\n */\ntitleHtml: FluentAssignMethod<string, this>;\n/**\n * aliased by 'body'\n * \\@aliasedBy body\n */\nmessage: FluentAssignMethod<string, this>;\n/**\n * The body of the modal.\n * Can be either text or HTML.\n * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n * \\@aliasOf message\n */\nbody: FluentAssignMethod<string, this>;\n/**\n * A Class for the body container.\n * Default: modal-body\n */\nbodyClass: FluentAssignMethod<string, this>;\n/**\n * A Class for the footer container.\n * Default: modal-footer\n */\nfooterClass: FluentAssignMethod<string, this>;\n/**\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n * @param {?=} baseType\n */\nconstructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(extend({buttons: []}, DEFAULT_VALUES), defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType\n    );\n\n    setAssignAlias(this, 'body', 'message', true);\n  }\n/**\n * @param {?} css\n * @param {?} caption\n * @param {?} onClick\n * @return {?}\n */\naddButton(css: string, caption: string, onClick: BSMessageModalButtonHandler): this {\n    let /** @type {?} */ btn = {\n      cssClass: css,\n      caption: caption,\n      onClick: onClick\n    };\n\n    let /** @type {?} */ key = privateKey('buttons');\n    ( /** @type {?} */((this[key] as BSMessageModalButtonConfig[]))).push(btn);\n\n    return this;\n  }\n}\n\nfunction MessageModalPresetBuilder_tsickle_Closure_declarations() {\n/**\n * A Class for the header (title) container.\n * Default: modal-header\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.headerClass;\n/**\n * Caption for the title, enclosed in a H3 container.\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.title;\n/**\n * HTML for the title, if set overrides title property.\n * The HTML is wrapped in a DIV element, inside the header container.\n * Example:\n * <div class=\"modal-header\">\n * <div> HTML CONTENT INSERTED HERE </div>\n * </div>\n * Note: HTML is not compiled.\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.titleHtml;\n/**\n * aliased by 'body'\n * \\@aliasedBy body\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.message;\n/**\n * The body of the modal.\n * Can be either text or HTML.\n * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n * \\@aliasOf message\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.body;\n/**\n * A Class for the body container.\n * Default: modal-body\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.bodyClass;\n/**\n * A Class for the footer container.\n * Default: modal-footer\n * @type {?}\n */\nMessageModalPresetBuilder.prototype.footerClass;\n}\n\n"]}