{"version":3,"sources":["../../../../src/ngx-modialog/src/framework/createComponent.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,wBAAwB,EAGxB,kBAAkB,EAEnB,MAAM,eAAe,CAAC;AASvB;;;GAGG;AACH,MAHC,0BAAA,YAAA;IAIC,IAAM,gBAAgB,CAHhB,QAAA,GAAqB,WAAA,CAAY,YAAC,CAAY,CAAC;IAIrD,IAAM,gBAAgB,CAHhB,UAAA,GACF,QAAA,CAAS,GAAC,CAAG,wBAAC,CAAwB,CAAC,uBAAC,CAAuB,YAAC,CAAY,SAAC,CAAS,CAAC;IAK3F,EAAE,CAAC,CAAC,YAHC,CAAY,KAAC,CAAK,CAAC,CAAA;QAItB,MAAM,CAHC,YAAA,CAAa,KAAC,CAAK,eAAC,CAIzB,UAAU,EACV,YAAY,CAHC,KAAC,CAAK,MAAC,EAIpB,QAAQ,EACR,YAAY,CAHC,gBAAC,CAIf,CAHC;IAIJ,CAAC;IAHC,IAAA,CAAK,CAAA;QAIL,MAAM,CAHC,UAAA,CAAW,MAAC,CAAM,QAAC,CAAQ,CAAC;IAIrC,CAAC;AACH,CAAC;AACD;;;GAGG;AACH,qBANC,YAAA;IAOC,IAAM,gBAAgB,CANhB,WAAA,GAAc,YAAA,CAAa,QAAC,IAAW,YAAA,CAAa,KAAC,CAAK,cAAC,CAAc;IAO/E,MAAM,CANC,KAAA,CAAM,OAAC,CAAO,YAAC,CAAY,QAAC,CAAQ,IAAI,YAAA,CAAa,QAAC,CAAQ,MAAC,GAAQ,CAAA;QAO5E,kBAAkB,CANC,qBAAC,CAAqB,YAAC,CAAY,QAAC,EAAS,WAAA,CAAY,GAAG,WAAA,CAAY;AAQ/F,CAAC","file":"createComponent.js","sourceRoot":"","sourcesContent":["import {\n  ComponentRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injector,\n  ViewContainerRef,\n  ReflectiveInjector,\n  ResolvedReflectiveProvider\n} from '@angular/core';\n\nexport interface CreateComponentArgs {\n  component: any;\n  vcRef: ViewContainerRef;\n  injector?: Injector;\n  bindings?: ResolvedReflectiveProvider[];\n  projectableNodes?: any[][];\n}\n/**\n * @param {?} instructions\n * @return {?}\n */\nexport function createComponent(instructions: CreateComponentArgs): ComponentRef<any> {\n  const /** @type {?} */ injector: Injector = getInjector(instructions);\n  const /** @type {?} */ cmpFactory: ComponentFactory<any>\n    = injector.get(ComponentFactoryResolver).resolveComponentFactory(instructions.component);\n\n  if (instructions.vcRef) {\n    return instructions.vcRef.createComponent(\n      cmpFactory,\n      instructions.vcRef.length,\n      injector,\n      instructions.projectableNodes\n    );\n  } else {\n    return cmpFactory.create(injector);\n  }\n}\n/**\n * @param {?} instructions\n * @return {?}\n */\nfunction getInjector(instructions: CreateComponentArgs) {\n  const /** @type {?} */ ctxInjector = instructions.injector || instructions.vcRef.parentInjector;\n  return Array.isArray(instructions.bindings) && instructions.bindings.length > 0 ?\n    ReflectiveInjector.fromResolvedProviders(instructions.bindings, ctxInjector) : ctxInjector;\n\n}\n\n"]}