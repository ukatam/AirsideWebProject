{"version":3,"sources":["../../../../src/ngx-modialog/src/framework/fluent-assign.ts"],"names":[],"mappings":"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","file":"fluent-assign.js","sourceRoot":"","sourcesContent":["import { extend, arrayUnion } from './utils';\nconst /** @type {?} */ PRIVATE_PREFIX = '$$';\nconst /** @type {?} */ RESERVED_REGEX = /^(\\$\\$).*/;\n/**\n * @param {?} name\n * @return {?}\n */\nfunction validateMethodName(name: string) {\n  if (!name) {\n    throw new Error(`Illegal method name. Empty method name is not allowed`);\n  } else if (name in this) {\n    throw new Error(`A member name '${name}' already defined.`);\n  }\n}\n/**\n * Returns a list of assigned property names (non private)\n * @param {?} subject\n * @return {?}\n */\nfunction getAssignedPropertyNames(subject: any): string[] {\n  return Object.getOwnPropertyNames(subject)\n    .filter(name => RESERVED_REGEX.test(name))\n    .map(name => name.substr(2));\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function privateKey(name: string): string {\n  return PRIVATE_PREFIX + name;\n}\n/**\n * @param {?} obj\n * @param {?} propertyName\n * @param {?} value\n * @return {?}\n */\nfunction objectDefinePropertyValue(obj: any, propertyName, value: (value: any) => void): void {\n  Object.defineProperty(obj, propertyName, /** @type {?} */(( <any>{\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value\n  })));\n}\n/**\n * Given a FluentAssign instance, apply all of the supplied default values so calling\n * instance.toJSON will return those values (does not create a setter function)\n * @param {?} instance\n * @param {?} defaultValues\n * @return {?}\n */\nfunction applyDefaultValues(instance: any, defaultValues: Object): void {\n  Object.getOwnPropertyNames(defaultValues)\n    .forEach(name => ( /** @type {?} */((<any>instance)))[privateKey(name)] = ( /** @type {?} */((<any>defaultValues)))[name]);\n}\n/**\n * Create a function for setting a value for a property on a given object.\n * @template T\n * @param {?} obj The object to apply the key & setter on.\n * @param {?} propertyName The name of the property on the object\n * @param {?=} writeOnce If true will allow writing once (default: false)\n * \n * Example:\n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp');\n * obj.myProp('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * \n * \n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp', true); // applying writeOnce\n * obj.myProp('someValue');\n * obj.myProp('someValue'); // ERROR: Overriding config property 'myProp' is not allowed.\n * @return {?}\n */\nexport function setAssignMethod<T>(obj: T, propertyName: string, writeOnce: boolean = false): void {\n  validateMethodName.call(obj, propertyName);\n\n  const /** @type {?} */ key = privateKey(propertyName);\n  objectDefinePropertyValue(obj, propertyName, (value: any) => {\n    if (writeOnce && this.hasOwnProperty(key)) {\n      throw new Error(`Overriding config property '${propertyName}' is not allowed.`);\n    }\n    obj[key] = value;\n    return obj;\n  });\n}\n/**\n * Create a function for setting a value that is an alias to an other setter function.\n * @template T\n * @param {?} obj The object to apply the key & setter on.\n * @param {?} propertyName The name of the property on the object\n * @param {?} srcPropertyName The name of the property on the object this alias points to\n * @param {?=} hard If true, will set a readonly property on the object that returns\n *        the value of the source property. Default: false\n * \n * Example:\n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp');\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // undefined\n * \n * \n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp', true); // setting a hard alias.\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // someValue\n * @return {?}\n */\nexport function setAssignAlias<T>(obj: T, propertyName: string,\n                                  srcPropertyName: string,\n                                  hard: boolean = false): void {\n  validateMethodName.call(obj, propertyName);\n\n  objectDefinePropertyValue(obj, propertyName, (value: any) => {\n    obj[srcPropertyName](value);\n    return obj;\n  });\n\n  if (hard === true) {\n    const /** @type {?} */ key = privateKey(propertyName), /** @type {?} */\n      srcKey = privateKey(srcPropertyName);\n\n    Object.defineProperty(obj, key, /** @type {?} */(( <any>{\n      configurable: false,\n      enumerable: false,\n      get: () => obj[srcKey]\n    })));\n  }\n}\n\n/**\n * Describes a fluent assign method.\n * A function that gets a value and returns the instance it works on.\n */\nexport interface FluentAssignMethod<T, Z> {\n  //TODO: Setting 'this' instead of Z does not work, this=ConfigSetter here...\n  (value: T): Z;\n}\n\n\nexport interface IFluentAssignFactory<Z> {\n  fluentAssign: Z;\n  setMethod(name: string, defaultValue?: any): IFluentAssignFactory<Z>;\n}\n/**\n * Represent a fluent API factory wrapper for defining FluentAssign instances.\n */\nexport class FluentAssignFactory<T> {\nprivate _fluentAssign: FluentAssign<T>;\n/**\n * @param {?=} fluentAssign\n */\nconstructor(fluentAssign?: FluentAssign<T>) {\n    this._fluentAssign =\n      fluentAssign instanceof FluentAssign ? fluentAssign : <any>new FluentAssign();\n  }\n/**\n * Create a setter method on the FluentAssign instance.\n * @param {?} name The name of the setter function.\n * @param {?=} defaultValue If set (not undefined) set's the value on the instance immediately.\n * @return {?}\n */\nsetMethod(name: string, defaultValue: any = undefined): FluentAssignFactory<T> {\n    setAssignMethod(this._fluentAssign, name);\n    if (defaultValue !== undefined) {\n      ( /** @type {?} */((<any>this._fluentAssign)))[name](defaultValue);\n    }\n    return this;\n  }\n/**\n * The FluentAssign instance.\n * @return {?}\n */\nget fluentAssign(): FluentAssign<T> {\n    return this._fluentAssign;\n  }\n}\n\nfunction FluentAssignFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nFluentAssignFactory.prototype._fluentAssign;\n}\n\n/**\n * Represent an object where every property is a function representing an assignment function.\n * Calling each function with a value will assign the value to the object and return the object.\n * Calling 'toJSON' returns an object with the same properties but this time representing the\n * assigned values.\n * \n * This allows setting an object in a fluent API manner.\n * Example:\n * let fluent = new FluentAssign<any>(undefined, ['some', 'went']);\n * fluent.some('thing').went('wrong').toJSON();\n * // { some: 'thing', went: 'wrong' }\n */\nexport class FluentAssign<T> {\nprivate __fluent$base__: new () => T;\n/**\n * Returns a FluentAssignFactory<FluentAssign<T>> ready to define a FluentAssign type.\n * @template T\n * @param {?=} defaultValues An object representing default values for the instance.\n * @param {?=} initialSetters A list of initial setters for the instance.\n * @return {?}\n */\nstatic compose<T>(defaultValues: T = undefined,\n                    initialSetters: string[] = undefined): FluentAssignFactory<T> {\n\n    return /** @type {?} */(( <any>FluentAssign.composeWith<FluentAssign<T>>(\n      new FluentAssign<T>(defaultValues, initialSetters))));\n  }\n/**\n * Returns a FluentAssignFactory<Z> where Z is an instance of FluentAssign<?> or a derived\n * class of it.\n * @template Z\n * @param {?} fluentAssign An instance of FluentAssign<?> or a derived class of FluentAssign<?>.\n * @return {?}\n */\nstatic composeWith<Z>(fluentAssign: Z): IFluentAssignFactory<Z> {\n    return /** @type {?} */(( <any>new FluentAssignFactory<any>( /** @type {?} */((<any>fluentAssign)))));\n  }\n/**\n *\n * @param {?=} defaultValues An object representing default values for the underlying object.\n * @param {?=} initialSetters A list of initial setters for this FluentAssign.\n * @param {?=} baseType the class/type to create a new base. optional, {} is used if not supplied.\n */\nconstructor(defaultValues: T | T[] = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    if (Array.isArray(defaultValues)) {\n      (defaultValues as Array<any>).forEach(d => applyDefaultValues(this, d));\n    } else if (defaultValues) {\n      applyDefaultValues(this, defaultValues);\n    }\n\n    if (Array.isArray(initialSetters)) {\n\n      initialSetters.forEach(name => setAssignMethod(this, name));\n    }\n\n    if (baseType) {\n      this.__fluent$base__ = baseType;\n    }\n  }\n/**\n * @return {?}\n */\ntoJSON(): T {\n    return getAssignedPropertyNames(this)\n      .reduce((obj: T, name: string) => {\n        const /** @type {?} */ key = privateKey(name);\n        // re-define property descriptors (we dont want their value)\n        let /** @type {?} */ propDesc = Object.getOwnPropertyDescriptor(this, key);\n        if (propDesc) {\n          Object.defineProperty(obj, name, propDesc);\n        } else {\n          ( /** @type {?} */((<any>obj)))[name] = ( /** @type {?} */((<any>this)))[key];\n        }\n        return obj;\n      }, this.__fluent$base__ ? new this.__fluent$base__() : /** @type {?} */(( <any>{})));\n  }\n}\n\nfunction FluentAssign_tsickle_Closure_declarations() {\n/** @type {?} */\nFluentAssign.prototype.__fluent$base__;\n}\n\n"]}