{"version":3,"sources":["../../../../src/ngx-modialog/src/framework/utils.ts"],"names":[],"mappings":"AACA;;;;;;GAMG;AACH,MAFC,iBAAA,EAAA,EAAA,EAAA;IAGC,IAAI,gBAAgB,CAFhB,CAAA,GAAK,CAAK,EAAC,CAAA,CAAE;IAGjB,GAAG,CAAC,CAAC,IAFC,gBAAA,CAAG,IAAA,IAAQ,EAAA,CAAG,CAAC,CAAA;QAGnB,EAAE,CAAC,CAAC,EAFC,CAAE,cAAC,CAAc,IAAC,CAAI,CAAC,CAAC,CAAA;YAG3B,CAAkB,CAFZ,CAAC,CAAA,CAAC,CAAC,IAAC,CAAI,GAAG,CAAA,CAAM,EAAC,CAAA,CAAE,CAAC,IAAC,CAAI,CAAC;QAGnC,CAAC;IACH,CAAC;IAED,GAAG,CAAC,CAAC,IAFC,gBAAA,CAAG,IAAA,IAAQ,EAAA,CAAG,CAAC,CAAA;QAGnB,EAAE,CAAC,CAAC,EAFC,CAAE,cAAC,CAAc,IAAC,CAAI,CAAC,CAAC,CAAA;YAG3B,CAAkB,CAFZ,CAAC,CAAA,CAAC,CAAC,IAAC,CAAI,GAAG,CAAA,CAAM,EAAC,CAAA,CAAE,CAAC,IAAC,CAAI,CAAC;QAGnC,CAAC;IACH,CAAC;IAED,MAAM,CAFC,CAAA,CAAE;AAGX,CAAC;AACD;;;;;;GAMG;AACH,MAFC,qBAAA,IAAA,EAAA,IAAA;IAGC,MAAM,CAFC,IAAA;SAGJ,MAFC,CAAM,IAAC,CAAI,MAAC,CAAM,UAAA,CAAC,IAAI,OAAA,IAAA,CAAK,OAAC,CAAO,CAAC,CAAC,KAAK,CAAA,CAAE,EAAtB,CAAsB,CAAC,CAAC,CAAC;AAItD,CAAC;AACD;;;;;GAKG;AACH,MAFC,sBAAA,OAAA,EAAA,MAAA;IAGC,EAAE,CAAC,CAAC,CAFC,KAAC,CAAK,OAAC,CAAO,MAAC,CAAM,CAAC;QAAC,MAAA,CAAO,MAAA,KAAW,IAAA,GAAO,KAAA,GAAQ,IAAA,CAAK;IAGlE,MAAM,CAFC,MAAA,CAAO,OAAC,CAAO,OAAC,CAAO,GAAG,CAAA,CAAE,CAAC;AAGtC,CAAC;AACD;;;;;;;;;;;;;;;;GAgBG;AACH,MADC,wBAAA,GAAA;IAEC,MAAM,CADC,MAAA,CAAO,mBAAC,CAAmB,GAAC,CAAG;SAEnC,GADC,CAAG,UAAA,CAAC,IAAI,OAAA,CAAI,SAAC,GAAI,CAAG,CAAC,CAAE,EAAf,CAAe,CAAE;SAE1B,IADC,CAAI,GAAC,CAAG,CAAC;IAGb,oCAAoC;IACpC,6CAA6C;IAC7C,0BAA0B;IAC1B,0BAA0B;AAC5B,CAAC;AACD;IAIA;QAAA,iBAKG;QAJC,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;YAClC,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACH,uBAAC;AAAD,CAVA,AAUC,IAAA;;AAED;IACA,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC;IACnC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC;IACnC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC;AAClC,CAAC;AAQD;;GAEG;AACH,MAXC,mBAAsB,CAAA","file":"utils.js","sourceRoot":"","sourcesContent":["\n/**\n * Simple object extend\n * @template T\n * @param {?} m1\n * @param {?} m2\n * @return {?}\n */\nexport function extend<T>(m1: any, m2: any): T {\n  var /** @type {?} */ m: T = /** @type {?} */(( <T>{}));\n  for (var /** @type {?} */ attr in m1) {\n    if (m1.hasOwnProperty(attr)) {\n      ( /** @type {?} */((<any>m)))[attr] = ( /** @type {?} */((<any>m1)))[attr];\n    }\n  }\n\n  for (var /** @type {?} */ attr in m2) {\n    if (m2.hasOwnProperty(attr)) {\n      ( /** @type {?} */((<any>m)))[attr] = ( /** @type {?} */((<any>m2)))[attr];\n    }\n  }\n\n  return m;\n}\n/**\n * Simple, not optimized, array union of unique values.\n * @template T\n * @param {?} arr1\n * @param {?} arr2\n * @return {?}\n */\nexport function arrayUnion<T>(arr1: any[], arr2: any[]): T[] {\n  return arr1\n    .concat(arr2.filter(v => arr1.indexOf(v) === -1));\n\n}\n/**\n * Returns true if the config supports a given key.\n * @param {?} keyCode\n * @param {?} config\n * @return {?}\n */\nexport function supportsKey(keyCode: number, config: Array<number>): boolean {\n  if (!Array.isArray(config)) return config === null ? false : true;\n  return config.indexOf(keyCode) > -1;\n}\n/**\n * Given an object representing a key/value map of css properties, returns a valid css string\n * representing the object.\n * Example:\n * console.log(toStyleString({\n *     position: 'absolute',\n *     width: '100%',\n *     height: '100%',\n *     top: '0',\n *     left: '0',\n *     right: '0',\n *     bottom: '0'\n * }));\n * // position:absolute;width:100%;height:100%;top:0;left:0;right:0;bottom:0\n * @param {?} obj\n * @return {?}\n */\nexport function toStyleString(obj: any | CSSStyleDeclaration): string {\n  return Object.getOwnPropertyNames(obj)\n    .map(k => `${k}:${obj[k]}`)\n    .join(';');\n\n  // let objStr = JSON.stringify(obj);\n  // return objStr.substr(1, objStr.length - 2)\n  //     .replace(/,/g, ';')\n  //     .replace(/\"/g, '');\n}\nexport class PromiseCompleter<R> {\n  promise: Promise<R>;\n  resolve: (value?: R|PromiseLike<R>) => void;\n  reject: (error?: any, stackTrace?: string) => void;\nconstructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nfunction PromiseCompleter_tsickle_Closure_declarations() {\n/** @type {?} */\nPromiseCompleter.prototype.promise;\n/** @type {?} */\nPromiseCompleter.prototype.resolve;\n/** @type {?} */\nPromiseCompleter.prototype.reject;\n}\n\n\nexport interface Class<T> {\n  new(...args: any[]): T;\n}\n\nexport type Maybe<T> = T | Promise<T>;\n/**\n * @return {?}\n */\nexport function noop() { }\n"]}