{"version":3,"sources":["../../../../src/ngx-modialog/src/overlay/overlay.directives.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EACV,gBAAgB,EAEjB,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,SAAA,EAAU,MAAA,sBAAA,CAAA;AACnB,OAAO,EAAE,UAAA,EAAW,MAAA,wBAAA,CAAA;AAEpB;;;;GAIG;AACH;IACA;;;OAGG;IACH,+BAFG,EAAe,EAAY,SAAyB;QAGnD,EAAE,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YAClC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAAI,gCAAA,GAAoC;QAG3C,EAFE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;oBAGvB,QAAQ,EAFE,yBAAA;iBAGX,EAFC,EAAG;KAGJ,CAFC;IAGF;;OAEG;IAHF,oCAAA,GAAA,cAAA,OAAA;QAKD,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,SAAS,GAAG;KAClB,EAPA,CAOA,CAAC;IACF,4BAAC;CAvBD,AAuBC,IAAA;SArBA,qBAAA;AAuBD;IACA,gBAAgB;IAChB,qBAAqB,CAAC,UAAU,CAAC;IACjC;;;OAGG;IACH,qBAAqB,CAAC,cAAc,CAAC;AACrC,CAAC;AAED;IAYA;;OAEG;IACH,uBAlBsB,KAAO;QAAP,UAAA,GAAA,KAAA,CAAO;IAAiB,CAAA;IAQ9C,sBAjBI,oCAAA;QAaJ;;;WAGG;aACH,UAjBI,KAAA;YAkBA,IAAI,CAjBC,UAAC,GAAY,KAAA,CAAM;YAkBxB,EAAE,CAAC,CAAC,KAjBC,CAAK,CAAC,CAAA;gBAkBT,UAAU,CAjBC,QAAC,CAAQ,KAAC,EAAM,IAAA,CAAK,KAAC,CAAK,CAAC;YAkBzC,CAAC;QACH,CAAC;;;OAAA;IAMH;;OAEG;IACH,mCApBG,GAoBH;QACI,EAAE,CAAC,CAAC,IApBC,CAAI,UAAC,CAAU,CAAC,CAAA;YAqBnB,UAAU,CApBC,QAAC,CAAQ,IAAC,CAAI,UAAC,EAAW,IAAA,CAAK,KAAC,CAAK,CAAC;QAqBnD,CAAC;IACH,CAAC;IAnBI,wBAAA,GAAoC;QAqB3C,EApBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;oBAqBvB,QAAQ,EApBE,iBAAA;iBAqBX,EApBC,EAAG;KAqBJ,CApBC;IAqBF;;OAEG;IArBF,4BAAA,GAAA,cAAA,OAAA;QAuBD,EAAC,IAAI,EAAE,gBAAgB,GAAG;KACzB,EAxBA,CAwBA,CAAC;IArBK,4BAAA,GAAyD;QAuBhE,WAAW,EAtBE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,eAAE,EAAe,EAAG,EAAE;KAuBxD,CAtBC;IAuBF,oBAAC;CAtCD,AAsCC,IAAA;SAnDA,aAAA;AAqDD;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC;IACnC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;AAC9B,CAAC","file":"overlay.directives.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy\n} from '@angular/core';\n\nimport { DialogRef } from '../models/dialog-ref';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { Overlay } from './overlay.service';\n/**\n * A directive use to signal the overlay that the host of this directive\n * is a dialog boundary, i.e: over click outside of the element should close the modal\n * (if non blocking)\n */\nexport class OverlayDialogBoundary {\n/**\n * @param {?} el\n * @param {?} dialogRef\n */\nconstructor(el: ElementRef, dialogRef: DialogRef<any>) {\n    if (dialogRef && el.nativeElement) {\n      dialogRef.overlayRef.instance.setClickBoundary(el.nativeElement);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[overlayDialogBoundary]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: DialogRef, },\n];\n}\n\nfunction OverlayDialogBoundary_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayDialogBoundary.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayDialogBoundary.ctorParameters;\n}\n\nexport class OverlayTarget implements OnDestroy {\n/**\n * @param {?} value\n * @return {?}\n */\nset targetKey(value: string) {\n    this._targetKey = value;\n    if (value) {\n      vcRefStore.setVCRef(value, this.vcRef);\n    }\n  }\nprivate _targetKey: string;\n/**\n * @param {?} vcRef\n */\nconstructor(private vcRef: ViewContainerRef) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._targetKey) {\n      vcRefStore.delVCRef(this._targetKey, this.vcRef);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[overlayTarget]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'targetKey': [{ type: Input, args: ['overlayTarget', ] },],\n};\n}\n\nfunction OverlayTarget_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayTarget.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayTarget.ctorParameters;\n/** @type {?} */\nOverlayTarget.propDecorators;\n/** @type {?} */\nOverlayTarget.prototype._targetKey;\n/** @type {?} */\nOverlayTarget.prototype.vcRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}