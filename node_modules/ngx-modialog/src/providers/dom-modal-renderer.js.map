{"version":3,"sources":["../../../../src/ngx-modialog/src/providers/dom-modal-renderer.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,cAAc,EAGd,QAAQ,EACR,UAAU,EACV,kBAAkB,EACnB,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,eAAA,EAAgB,MAAA,8BAAA,CAAA;AACzB,OAAO,EAAE,SAAA,EAAU,MAAA,sBAAA,CAAA;AAEnB,OAAO,EAAE,YAAA,EAAa,MAAA,kBAAA,CAAA;AACtB;IAEA;;;OAGG;IACH,4BAAsB,MAAQ,EAAwB,QAAU;QAA1C,WAAA,GAAA,MAAA,CAAQ;QAAwB,aAAA,GAAA,QAAA,CAAU;QAFtD,UAAA,GAAiB,CAAA,CAAE,OAAO,QAAA,KAAa,WAAA,IAAe,CAAA,QAAE,CAAQ,CAAC;IAEF,CAAA;IAEzE;;;;;OAKG;IACH,mCANG,GAMH,UANG,MAAA,EAAA,KAAA,EAAA,QAAA;QAMH,iBA8BG;QA7BC,EAAE,CAAC,CAAC,CANC,QAAC,CAAQ,CAAC,CAAA;YAOb,QAAQ,GANG,IAAA,CAAK,QAAC,CAAQ;QAO3B,CAAC;QAED,IAAM,gBAAgB,CANhB,QAAA,GAAW,kBAAA,CAAmB,OAAC,CAAO;YAO1C,EANE,OAAA,EAAS,SAAA,EAAW,QAAA,EAAU,MAAA,EAAO;SAOxC,CANC,CAAC;QAQH,IAAM,gBAAgB,CANhB,MAAA,GAAS,eAAA,CAAgB;YAO7B,SAAS,EANE,YAAA;YAOX,KAAK,OAAA;YACL,QAAQ,UAAA;YACR,QAAQ,UAAA;SACT,CANC,CAAC;QAQH,EAAE,CAAC,CAAC,CANC,KAAC,CAAK,CAAC,CAAA;YAOV,IAAI,CANC,MAAC,CAAM,UAAC,CAAU,MAAC,CAAM,QAAC,CAAQ,CAAC;YAQxC,uFAAuF;YACvF,MAAM,CANC,SAAC,CAAS,SAAC,CAAU,cAAM,OAAA,KAAA,CAAK,MAAC,CAAM,UAAC,CAAU,MAAC,CAAM,QAAC,CAAQ,EAAvC,CAAuC,CAAC,CAAE;QAO9E,CAAC;QAED,EAAE,CAAC,CAAC,KANC,IAAQ,MAAA,CAAO,SAAC,CAAS,CAAC,CAAA;YAO7B,KAAK,CANC,OAAC,CAAO,aAAC,CAAa,WAAC,CAAW,MAAC,CAAM,QAAC,CAAQ,aAAC,CAAa,CAAC;QAOzE,CAAC;QANC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,CAAK,CAAC,CAAA;YAOrB,QAAQ,CANC,IAAC,CAAI,WAAC,CAAW,MAAC,CAAM,QAAC,CAAQ,aAAC,CAAa,CAAC;QAO3D,CAAC;QAED,MAAM,CANC,MAAA,CAAO;IAOhB,CAAC;IALI,6BAAA,GAAoC;QAO3C,EANE,IAAA,EAAM,UAAA,EAAW;KAOlB,CANC;IAOF;;OAEG;IAPF,iCAAA,GAAA,cAAA,OAAA;QASD,EAAC,IAAI,EAAE,cAAc,GAAG;QACxB,EAAC,IAAI,EAAE,QAAQ,GAAG;KACjB,EAXA,CAWA,CAAC;IACF,yBAAC;CAvDD,AAuDC,IAAA;SArDA,kBAAA;AAuDD;IACA,gBAAgB;IAChB,kBAAkB,CAAC,UAAU,CAAC;IAC9B;;;OAGG;IACH,kBAAkB,CAAC,cAAc,CAAC;IAClC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,KAAK,CAAC;IACnC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC;IACpC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC;AACtC,CAAC","file":"dom-modal-renderer.js","sourceRoot":"","sourcesContent":["import {\n  ApplicationRef,\n  ViewContainerRef,\n  ComponentRef,\n  Injector,\n  Injectable,\n  ReflectiveInjector\n} from '@angular/core';\n\nimport { createComponent } from '../framework/createComponent';\nimport { DialogRef } from '../models/dialog-ref';\nimport { OverlayRenderer } from '../models/tokens';\nimport { ModalOverlay } from '../overlay/index';\nexport class DOMOverlayRenderer implements OverlayRenderer {\nprivate isDoc: boolean = !(typeof document === 'undefined' || !document);\n/**\n * @param {?} appRef\n * @param {?} injector\n */\nconstructor(private appRef: ApplicationRef,\nprivate injector: Injector) { }\n/**\n * @param {?} dialog\n * @param {?} vcRef\n * @param {?=} injector\n * @return {?}\n */\nrender(dialog: DialogRef<any>, vcRef: ViewContainerRef, injector?: Injector): ComponentRef<ModalOverlay> {\n    if (!injector) {\n      injector = this.injector;\n    }\n\n    const /** @type {?} */ bindings = ReflectiveInjector.resolve([\n      { provide: DialogRef, useValue: dialog }\n    ]);\n\n    const /** @type {?} */ cmpRef = createComponent({\n      component: ModalOverlay,\n      vcRef,\n      injector,\n      bindings\n    });\n\n    if (!vcRef) {\n      this.appRef.attachView(cmpRef.hostView);\n\n      // TODO: doesn't look like this is needed, explore. leaving now to be on the safe side.\n      dialog.onDestroy.subscribe( () => this.appRef.detachView(cmpRef.hostView) );\n    }\n\n    if (vcRef && dialog.inElement) {\n      vcRef.element.nativeElement.appendChild(cmpRef.location.nativeElement);\n    } else if (this.isDoc) {\n      document.body.appendChild(cmpRef.location.nativeElement);\n    }\n\n    return cmpRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ApplicationRef, },\n{type: Injector, },\n];\n}\n\nfunction DOMOverlayRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nDOMOverlayRenderer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDOMOverlayRenderer.ctorParameters;\n/** @type {?} */\nDOMOverlayRenderer.prototype.isDoc;\n/** @type {?} */\nDOMOverlayRenderer.prototype.appRef;\n/** @type {?} */\nDOMOverlayRenderer.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}