{"version":3,"sources":["../../../../src/ngx-modialog/src/models/dialog-ref.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAA,EAAQ,MAAA,cAAA,CAAA;AAEjB,OAAO,EAAE,gBAAA,EAAiB,MAAA,oBAAA,CAAA;AAG1B,OAAO,EAAE,kBAAA,EAAmB,MAAA,kBAAA,CAAA;AAC5B;;GAEG;AACH;IAoBA;;;OAGG;IACH,mBAGqB,OAAS,EAAgB,OAAU;QAAnC,YAAA,GAAA,OAAA,CAAS;QAAgB,YAAA,GAAA,OAAA,CAAU;QAJ9C,oBAAA,GAAyC,IAAI,gBAAA,EAAqB,CAAG;QACrE,eAAA,GAA4B,IAAI,OAAA,EAAa,CAAG;QAEtD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;IAClD,CAAC;IAKH,sBAGG,6BAAA;QAPH;;;WAGG;aACH;YACI,MAAM,CAGC,IAAA,CAAK,eAAC,CAAe,OAAC,CAAO;QAFtC,CAAC;;;OAAA;IACH;;;;OAIG;IACH,iCAGG,GAHH,UAGG,KAAA;QAFC,IAAI,CAGC,UAAC,GAAY,KAAA,CAAM;IAF1B,CAAC;IACH;;;;OAIG;IACH,yBAEG,GAFH,UAEG,MAAA;QAFH,iBAQG;QANA,uBAAA,EAAA,aAAA;QADC,IAAM,gBAAgB,CAEhB,MAAA,GAAS;YADb,KAAI,CAEC,OAAC,EAAO,CAAE;YADf,KAAI,CAEC,eAAC,CAAe,OAAC,CAAO,MAAC,CAAM,CAAC;QADvC,CAAC,CAEC;QADF,IAAI,CAEC,SAAC,CAAiB,aAAE,CAAa;aADnC,IAEC,CAAI,UAAA,KAAC,IAAQ,OAAA,KAAA,KAAU,IAAA,IAAQ,MAAA,EAAO,EAAzB,CAAyB,CAAE;aADzC,KAEC,CAAK,MAAC,CAAM,CAAC;IADnB,CAAC;IACH;;;;;;;OAOG;IACH,2BAEG,GAFH;QAAA,iBASG;QARC,IAAM,gBAAgB,CAEhB,QAAA,GAAW;YADf,KAAI,CAEC,OAAC,EAAO,CAAE;YADf,KAAI,CAEC,eAAC,CAAe,OAAC,CAAO,KAAC,CAAK,cAAM,CAAA,CAAG,CAAC;YAD7C,KAAI,CAEC,eAAC,CAAe,MAAC,EAAM,CAAE;QADhC,CAAC,CAEC;QADF,IAAI,CAEC,SAAC,CAAiB,eAAE,CAAe;aADrC,IAEC,CAAI,UAAA,KAAC,IAAQ,OAAA,KAAA,KAAU,IAAA,IAAQ,QAAA,EAAS,EAA3B,CAA2B,CAAE;aAD3C,KAEC,CAAK,QAAC,CAAQ,CAAC;IADrB,CAAC;IACH;;;;OAIG;IACH,2BAEG,GAFH;QACI,EAAE,CAAC,CAAC,IAEC,CAAI,SAAC,KAAa,IAAA,CAAK,CAAC,CAAA;YAD3B,IAAI,CAEC,SAAC,GAAW,IAAA,CAAK;YADtB,IAAI,CAEC,UAAC,CAAU,IAAC,CAAI,IAAC,CAAI,CAAC;YAD3B,IAAI,CAEC,UAAC,CAAU,QAAC,EAAQ,CAAE;YAD3B,IAAI,CAEC,eAAC,CAAe,MAAC,CAAM,IAAI,kBAAA,EAAmB,CAAE,CAAC;QADxD,CAAC;IACH,CAAC;IACH;;OAEG;IACH,2BAAG,GAAH;QAAA,iBAYG;QAXC,EAAE,CAAC,CAAC,IAAC,CAAI,SAAC,KAAa,IAAA,CAAK,CAAC,CAAA;YAC3B,IAAI,CAAC,SAAC,GAAW,IAAA,CAAK;YAEtB,EAAE,CAAC,CAAC,OAAO,IAAA,CAAK,UAAC,CAAU,QAAC,CAAQ,UAAC,KAAc,UAAA,CAAW,CAAC,CAAA;gBAC7D,IAAI,CAAC,UAAC,CAAU,QAAC,CAAQ,UAAC,EAAU;qBACjC,KAAC,CAAM,cAAM,CAAA,CAAG;qBAChB,IAAC,CAAM,cAAM,OAAA,KAAA,CAAK,QAAC,EAAQ,EAAd,CAAc,CAAE,CAAE;YACpC,CAAC;YAAC,IAAA,CAAK,CAAA;gBACL,IAAI,CAAC,QAAC,EAAQ,CAAE;YAClB,CAAC;QACH,CAAC;IACH,CAAC;IACH;;OAEG;IADA,4BAAA,GAEH;QACI,IAAI,CAFC,UAAC,CAAU,IAAC,CAAI,IAAC,CAAI,CAAC;QAG3B,IAAI,CAFC,UAAC,CAAU,QAAC,EAAQ,CAAE;QAG3B,IAAI,CAFC,UAAC,CAAU,OAAC,EAAO,CAAA;IAG1B,CAAC;IACH;;;;OAIG;IALA,6BAAA,GAMH,UANG,IAAA;QAOC,IAAM,gBAAgB,CANhB,KAAA,GAAQ,IAAA,CAAK,UAAC,EAAU,gBAAA,CAOxB,EAAE,GANa,KAAA,IAAS,OAAO,KAAA,CAAM,IAAC,CAAI,KAAK,UAAA,IAAc,KAAA,CAAM,IAAC,CAAI,CAAC;QAQ/E,MAAM,CANC,OAAA,CAAQ,OAAC,CAAO,EAAC,GAAI,EAAA,CAAG,IAAC,CAAI,KAAC,CAAK,GAAG,KAAA,CAAM,CAAC;IAOtD,CAAC;IACH,gBAAC;AAAD,CA3HA,AA2HC,IAAA;;AAED;IACA;;;OAGG;IACH,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC;IAC/B;;;OAGG;IACH,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC;IAC9B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC;IAC9B;;;;;;OAMG;IACH,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC;IAC9B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,eAAe,CAAC;IACpC,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC;IAC/B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC;IAC/B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC;IAC5B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC;AAC5B,CAAC","file":"dialog-ref.js","sourceRoot":"","sourcesContent":["import { ComponentRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport { PromiseCompleter } from '../framework/utils';\nimport { Overlay, ModalOverlay } from '../overlay/index';\nimport { CloseGuard } from '../models/tokens';\nimport { DialogBailOutError } from '../models/errors';\n/**\n * API to an open modal window.\n */\nexport class DialogRef<T> {\n/**\n * Reference to the overlay component ref.\n */\noverlayRef: ComponentRef<ModalOverlay>;\n/**\n * States if the modal is inside a specific element.\n */\npublic inElement: boolean;\npublic destroyed: boolean;\n/**\n * Fired before dialog is destroyed.\n * No need to unsubscribe, done automatically.\n * Note: Always called.\n * When called, overlayRef might or might not be destroyed.\n */\npublic onDestroy: Observable<void>;\nprivate _resultDeferred: PromiseCompleter<any> = new PromiseCompleter<any>();\nprivate _onDestroy: Subject<void> = new Subject<void>();\nprivate closeGuard: CloseGuard;\n/**\n * @param {?} overlay\n * @param {?=} context\n */\nconstructor(public overlay: Overlay,\npublic context?: T) {\n    this.onDestroy = this._onDestroy.asObservable();\n  }\n/**\n * A Promise that is resolved on a close event and rejected on a dismiss event.\n * @return {?}\n */\nget result(): Promise<any> {\n    return this._resultDeferred.promise;\n  }\n/**\n * Set a close/dismiss guard\n * @param {?} guard\n * @return {?}\n */\nsetCloseGuard(guard: CloseGuard): void {\n    this.closeGuard = guard;\n  }\n/**\n *  Close the modal with a return value, i.e: result.\n * @param {?=} result\n * @return {?}\n */\nclose(result: any = null) {\n    const /** @type {?} */ _close = () => {\n      this.destroy();\n      this._resultDeferred.resolve(result);\n    };\n    this._fireHook<boolean>('beforeClose')\n      .then(value => value !== true && _close())\n      .catch(_close);\n  }\n/**\n *  Close the modal without a return value, i.e: cancelled.\n *  This call is automatically invoked when a user either:\n *  - Presses an exit keyboard key (if configured).\n *  - Clicks outside of the modal window (if configured).\n *  Usually, dismiss represent a Cancel button or a X button.\n * @return {?}\n */\ndismiss() {\n    const /** @type {?} */ _dismiss = () => {\n      this.destroy();\n      this._resultDeferred.promise.catch(() => {});\n      this._resultDeferred.reject();\n    };\n    this._fireHook<boolean>('beforeDismiss')\n      .then(value => value !== true && _dismiss())\n      .catch(_dismiss);\n  }\n/**\n * Gracefully close the overlay/dialog with a rejected result.\n * Does not trigger canDestroy on the overlay.\n * @return {?}\n */\nbailOut() {\n    if (this.destroyed !== true) {\n      this.destroyed = true;\n      this._onDestroy.next(null);\n      this._onDestroy.complete();\n      this._resultDeferred.reject(new DialogBailOutError());\n    }\n  }\n/**\n * @return {?}\n */\ndestroy() {\n    if (this.destroyed !== true) {\n      this.destroyed = true;\n\n      if (typeof this.overlayRef.instance.canDestroy === 'function') {\n        this.overlayRef.instance.canDestroy()\n          .catch( () => {})\n          .then ( () => this._destroy() );\n      } else {\n        this._destroy();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nprivate _destroy(): void {\n    this._onDestroy.next(null);\n    this._onDestroy.complete();\n    this.overlayRef.destroy()\n  }\n/**\n * @template T\n * @param {?} name\n * @return {?}\n */\nprivate _fireHook<T>(name: 'beforeClose' | 'beforeDismiss'): Promise<T> {\n    const /** @type {?} */ gurad = this.closeGuard, /** @type {?} */\n          fn: Function = gurad && typeof gurad[name] === 'function' && gurad[name];\n\n    return Promise.resolve(fn ? fn.call(gurad) : false);\n  }\n}\n\nfunction DialogRef_tsickle_Closure_declarations() {\n/**\n * Reference to the overlay component ref.\n * @type {?}\n */\nDialogRef.prototype.overlayRef;\n/**\n * States if the modal is inside a specific element.\n * @type {?}\n */\nDialogRef.prototype.inElement;\n/** @type {?} */\nDialogRef.prototype.destroyed;\n/**\n * Fired before dialog is destroyed.\n * No need to unsubscribe, done automatically.\n * Note: Always called.\n * When called, overlayRef might or might not be destroyed.\n * @type {?}\n */\nDialogRef.prototype.onDestroy;\n/** @type {?} */\nDialogRef.prototype._resultDeferred;\n/** @type {?} */\nDialogRef.prototype._onDestroy;\n/** @type {?} */\nDialogRef.prototype.closeGuard;\n/** @type {?} */\nDialogRef.prototype.overlay;\n/** @type {?} */\nDialogRef.prototype.context;\n}\n\n"]}