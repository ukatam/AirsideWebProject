{"version":3,"sources":["../../../../src/ngx-modialog/src/models/overlay-context.ts"],"names":[],"mappings":"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","file":"overlay-context.js","sourceRoot":"","sourcesContent":["import { FluentAssign, FluentAssignMethod } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nimport { DialogRef } from './dialog-ref';\nimport { WideVCRef, OverlayConfig } from './tokens';\n\nexport const /** @type {?} */ DEFAULT_VALUES = {\n  inElement: false,\n  isBlocking: true,\n  keyboard: [27],\n  supportsKey: function supportsKey(keyCode: number): boolean {\n    return ( /** @type {?} */((<Array<number>>this.keyboard))).indexOf(keyCode) > -1;\n  }\n};\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n  'inElement',\n  'isBlocking',\n  'keyboard'\n];\nexport class OverlayContext {\n/**\n * Describes if the modal is rendered within the container element.\n * The container element is the ViewContainerRef supplied.\n * Defaults to false.\n */\ninElement: boolean;\n/**\n * Describes if the modal is blocking modal.\n * A Blocking modal is not closable by clicking outside of the modal window.\n * Defaults to false.\n */\nisBlocking: boolean;\n/**\n * Keyboard value/s that close the modal.\n * Accepts either a single numeric value or an array of numeric values.\n * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n * Defaults to 27, set `null` implicitly to disable.\n */\nkeyboard: Array<number> | number;\n/**\n * @return {?}\n */\nnormalize(): void {\n    if (this.isBlocking !== false)\n      this.isBlocking = true;\n\n    if (this.keyboard === null) {\n      this.keyboard = [];\n    } else if (typeof this.keyboard === 'number') {\n      this.keyboard = [ /** @type {?} */((<number>this.keyboard))];\n    } else if (!Array.isArray( /** @type {?} */((<Array<number>>this.keyboard)))) {\n      this.keyboard = DEFAULT_VALUES.keyboard;\n    }\n  }\n}\n\nfunction OverlayContext_tsickle_Closure_declarations() {\n/**\n * Describes if the modal is rendered within the container element.\n * The container element is the ViewContainerRef supplied.\n * Defaults to false.\n * @type {?}\n */\nOverlayContext.prototype.inElement;\n/**\n * Describes if the modal is blocking modal.\n * A Blocking modal is not closable by clicking outside of the modal window.\n * Defaults to false.\n * @type {?}\n */\nOverlayContext.prototype.isBlocking;\n/**\n * Keyboard value/s that close the modal.\n * Accepts either a single numeric value or an array of numeric values.\n * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n * Defaults to 27, set `null` implicitly to disable.\n * @type {?}\n */\nOverlayContext.prototype.keyboard;\n}\n\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\nexport class OverlayContextBuilder<T extends OverlayContext> extends FluentAssign<T> {\n/**\n * Describes if the modal is rendered within the container element.\n * The container element is the ViewContainerRef supplied.\n * Defaults to false.\n */\ninElement: FluentAssignMethod<boolean, this>;\n/**\n * Describes if the modal is blocking modal.\n * A Blocking modal is not closable by clicking outside of the modal window.\n * Defaults to false.\n */\nisBlocking: FluentAssignMethod<boolean, this>;\n/**\n * Keyboard value/s that close the modal.\n * Accepts either a single numeric value or an array of numeric values.\n * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n * Defaults to 27, set `null` implicitly to disable.\n */\nkeyboard: FluentAssignMethod<Array<number> | number, this>;\n/**\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n * @param {?=} baseType\n */\nconstructor(defaultValues: T | T[] = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(DEFAULT_VALUES, defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>OverlayContext // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n/**\n * Returns an new OverlayConfig with a context property representing the data in this builder.\n * @param {?=} base A base configuration that the result will extend\n * @return {?} OverlayConfig\n */\ntoOverlayConfig(base?: OverlayConfig): OverlayConfig {\n    return extend(base || {}, {\n      context: this.toJSON()\n    });\n  }\n}\n\nfunction OverlayContextBuilder_tsickle_Closure_declarations() {\n/**\n * Describes if the modal is rendered within the container element.\n * The container element is the ViewContainerRef supplied.\n * Defaults to false.\n * @type {?}\n */\nOverlayContextBuilder.prototype.inElement;\n/**\n * Describes if the modal is blocking modal.\n * A Blocking modal is not closable by clicking outside of the modal window.\n * Defaults to false.\n * @type {?}\n */\nOverlayContextBuilder.prototype.isBlocking;\n/**\n * Keyboard value/s that close the modal.\n * Accepts either a single numeric value or an array of numeric values.\n * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n * Defaults to 27, set `null` implicitly to disable.\n * @type {?}\n */\nOverlayContextBuilder.prototype.keyboard;\n}\n\n\nexport interface ModalControllingContextBuilder<T> {\n  open(viewContainer?: WideVCRef): Promise<DialogRef<T>>;\n}\n/**\n * A helper to create an `OverlayConfig` on the fly.\n * Since `OverlayConfig` requires context it means a builder is needed, this process had some boilerplate.\n * When a quick, on the fly overlay config is needed use this helper to avoid that boilerplate.\n * \n * A builder is used as an API to allow setting the context and providing some operations around the modal.\n * When a developers knows the context before hand we can skip this step, this is what this factory is for.\n * \n * @template T\n * @param {?} context The context for the modal\n * @param {?=} baseContextType Optional. The type/class of the context. This is the class used to init a new instance of the context\n * @param {?=} baseConfig A base configuration that the result will extend\n * @return {?}\n */\nexport function overlayConfigFactory<T>(context: T, baseContextType?: any, baseConfig?: OverlayConfig): OverlayConfig {\n  return new OverlayContextBuilder<T & OverlayContext>( /** @type {?} */((<any>context)), undefined, baseContextType).toOverlayConfig(baseConfig);\n}"]}