{"version":3,"sources":["../../../../src/ngx-modialog/src/models/modal-open-context.ts"],"names":[],"mappings":";;;;;;;;;;AAIA,OAAO,EAAE,KAAA,EAAM,MAAA,oBAAA,CAAA;AAEf,OAAO,EAAE,YAAA,EAAc,mBAAA,EAAoB,MAAA,iBAAA,CAAA;AAG3C,OAAO,EAAE,UAAA,EAAW,MAAA,oBAAA,CAAA;AAEpB,IAAM,gBAAgB,CAAhB,eAAA,GAAkB;IACtB,WAAW;CACZ,CAAC;AACF;IACC,oCAAA;IADD;;IAGA,CAAC;IAAD,uBAAC;AAAD,CAHA,AAGC,CAFA,YAAA,GAEA;;AAED;IACA,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,SAAS,CAAC;IACrC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC;AACjC,CAAC;AAED;;;;;GAKG;AACH;IAC0B,2CAAsB;IAMhD;;;;OAIG;IACH,iCAVG,aAA8B,EAWnB,cAV2B,EAW3B,QAVwB;QAFnC,8BAAA,EAAA,yBAA8B;QAWnB,+BAAA,EAAA,0BAV2B;QAW3B,yBAAA,EAAA,oBAVwB;eAWlC,kBACE,aAAa,IAAS,EAAE,EACxB,UAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACT;IACH,CAAC;IACH;;;;OAIG;IATA,8CAAA,GAUH,UAVG,MAAA;QAWC,MAAM,CAVC,EAAA,CAAG;IAWZ,CAAC;IACH;;;;OAIG;IACH,sCATG,GASH,UATG,aAAA;QAUC,IAAI,gBAAgB,CAThB,OAAA,GAAa,IAAA,CAAK,MAAC,EAAM,CAAE;QAW/B,EAAE,CAAC,CAAC,CATC,CAAC,OAAC,CAAO,KAAC,YAAgB,KAAA,CAAM,CAAC,CAAC,CAAA;YAUrC,MAAM,CAAiB,CATX,OAAC,CAAO,MAAC,CAAM,IAAI,KAAA,CAAM,6CAAC,CAA6C,CAAC,CAAA,CAAC;QAUvF,CAAC;QAED,IAAI,gBAAgB,CAThB,aAAA,GAA+B;YAUjC,OAAO,EATE,OAAA;YAUT,aAAa,EATE,aAAA;YAUf,QAAQ,EATE,OAAO,IAAA,CAAK,YAAC,KAAgB,UAAA,IAAc,IAAA,CAAK,YAAC,CAAY,OAAC,CAAO;SAUhF,CATC;QAWF,MAAM,CATC,OAAA,CAAQ,KAAC,CAAK,IAAC,CAAI,OAAC,CAAO,SAAC,EAAU,aAAA,CAAc,CAAC;IAU9D,CAAC;IACH,8BAAC;AAAD,CAjDA,AAiDC,CAhDyB,mBAAmB,GAgD5C;;AAED;IACA;;;;OAIG;IACH,uBAAuB,CAAC,SAAS,CAAC,SAAS,CAAC;AAC5C,CAAC","file":"modal-open-context.js","sourceRoot":"","sourcesContent":["import { ResolvedReflectiveProvider } from '@angular/core';\n\nimport { FluentAssignMethod } from '../framework/fluent-assign';\nimport { ModalComponent, OverlayConfig, WideVCRef } from './tokens';\nimport { Modal } from '../providers/index';\nimport { DialogRef } from './dialog-ref';\nimport { ModalContext, ModalContextBuilder } from './modal-context';\nimport { ModalControllingContextBuilder } from './overlay-context';\n\nimport { arrayUnion } from '../framework/utils';\n\nconst /** @type {?} */ DEFAULT_SETTERS = [\n  'component'\n];\nexport class ModalOpenContext extends ModalContext {\n  component: any;\n  modal: Modal;\n}\n\nfunction ModalOpenContext_tsickle_Closure_declarations() {\n/** @type {?} */\nModalOpenContext.prototype.component;\n/** @type {?} */\nModalOpenContext.prototype.modal;\n}\n\n/**\n * A Modal Context that knows about the modal service, and so can open a modal window on demand.\n * Use the fluent API to configure the preset and then invoke the 'open' method to open a modal\n * based on the context.\n * @abstract\n */\nexport abstract class ModalOpenContextBuilder<T extends ModalOpenContext>\n                  extends ModalContextBuilder<T> implements ModalControllingContextBuilder<T> {\n/**\n * A Class for the footer container.\n * Default: modal-footer\n */\ncomponent: FluentAssignMethod<ModalComponent<T>, this>;\n/**\n * @param {?=} defaultValues\n * @param {?=} initialSetters\n * @param {?=} baseType\n */\nconstructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      defaultValues || <any>{},\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType\n    );\n  }\n/**\n * Hook to alter config and return bindings.\n * @param {?} config\n * @return {?}\n */\nprotected $$beforeOpen(config: T): ResolvedReflectiveProvider[] {\n    return [];\n  }\n/**\n * Open a modal window based on the configuration of this config instance.\n * @param {?=} viewContainer If set opens the modal inside the supplied viewContainer\n * @return {?} Promise<DialogRef>\n */\nopen(viewContainer?: WideVCRef): Promise<DialogRef<T>> {\n    let /** @type {?} */ context: T = this.toJSON();\n\n    if (!(context.modal instanceof Modal)) {\n      return /** @type {?} */(( <any>Promise.reject(new Error('Configuration Error: modal service not set.'))));\n    }\n\n    let /** @type {?} */ overlayConfig: OverlayConfig = {\n      context: context,\n      viewContainer: viewContainer,\n      bindings: typeof this.$$beforeOpen === 'function' && this.$$beforeOpen(context)\n    };\n\n    return context.modal.open(context.component, overlayConfig);\n  }\n}\n\nfunction ModalOpenContextBuilder_tsickle_Closure_declarations() {\n/**\n * A Class for the footer container.\n * Default: modal-footer\n * @type {?}\n */\nModalOpenContextBuilder.prototype.component;\n}\n\n"]}