{"version":3,"sources":["../../../../src/ngx-modialog/src/models/tokens.ts"],"names":[],"mappings":"AAcA,MAAM,CAAC,IAAI,YAAY,GAAQ,EAAE,CAAC;AAClC,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC;AACvB,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;AACxB,YAAY,CAAC,OAAO,GAAG,CAAC,CAAC;AACzB,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;AAC3C,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;AAC7C,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;AAuD/C;;GAEG;AACH;IAAA;IAWA,CAAC;IAVD;;;;;;OAMG;IACH,gCAZmB,GAYnB,UAZmB,SAAA,EAaM,KAAuB,EACvB,QAAmB,IAAG,CAAC;IAChD,sBAAC;AAAD,CAXA,AAWC,IAAA","file":"tokens.js","sourceRoot":"","sourcesContent":["import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef,\n  TemplateRef,\n  Type,\n  ResolvedReflectiveProvider\n} from '@angular/core';\n\nimport { ModalOverlay } from '../overlay/index';\nimport { DialogRef } from './dialog-ref';\nimport { OverlayContext } from '../models/overlay-context';\nimport { Maybe } from '../framework/utils';\nexport type DROP_IN_TYPE = number;\nexport let DROP_IN_TYPE: any = {};\nDROP_IN_TYPE.alert = 0;\nDROP_IN_TYPE.prompt = 1;\nDROP_IN_TYPE.confirm = 2;\nDROP_IN_TYPE[DROP_IN_TYPE.alert] = \"alert\";\nDROP_IN_TYPE[DROP_IN_TYPE.prompt] = \"prompt\";\nDROP_IN_TYPE[DROP_IN_TYPE.confirm] = \"confirm\";\n\n\nexport type WideVCRef = ViewContainerRef | string;\n\nexport type ContainerContent = string | TemplateRef<any> | Type<any>;\n\nexport interface OverlayPlugin extends Function {\n  <T>(component: any, dialogRef: DialogRef<T>, config: OverlayConfig): Maybe<DialogRef<any>>;\n}\n\nexport interface OverlayConfig {\n  /**\n   * The context for the modal, attached to the dialog instance, DialogRef.context.\n   * Default: {}\n   */\n  context?: OverlayContext;\n\n  injector?: Injector;\n\n  /**\n   * Resolved providers that will inject into the component provided.\n   */\n  bindings?: ResolvedReflectiveProvider[];\n\n  /**\n   * The element to block using the modal.\n   */\n  viewContainer?: WideVCRef;\n\n  renderer?: OverlayRenderer;\n\n  /**\n   * Not used yet.\n   */\n  overlayPlugins?: OverlayPlugin | Array<OverlayPlugin>;\n}\n\nexport interface ModalComponent<T> {\n  dialog: DialogRef<T>;\n}\n\nexport interface CloseGuard {\n  /**\n   * Invoked before a modal is dismissed.\n   * @return true or a promise that resolves to true to cancel dismissal.\n   */\n  beforeDismiss?(): boolean | Promise<boolean>;\n\n  /**\n   * Invoked before a modal is closed.\n   * @return true or a promise that resolves to true to cancel closing.\n   */\n  beforeClose?(): boolean | Promise<boolean>;\n}\n/**\n * @abstract\n */\nexport abstract class OverlayRenderer {\n/**\n * @abstract\n * @param {?} dialogRef\n * @param {?} vcRef\n * @param {?=} injector\n * @return {?}\n */\nrender(dialogRef: DialogRef<any>,\n                         vcRef: ViewContainerRef,\n                         injector?: Injector) {}\n}\n"]}