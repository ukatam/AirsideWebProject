{"version":3,"sources":["../../../../src/ngx-modialog/src/models/dialog-ref-stack.ts"],"names":[],"mappings":"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","file":"dialog-ref-stack.js","sourceRoot":"","sourcesContent":["import { DialogRef } from './dialog-ref';\n\nconst /** @type {?} */ BASKET_GROUP = {};\n/**\n * A dumb stack implementation over an array.\n */\nexport class DialogRefStack<T> {\nprivate _stack: DialogRef<T>[];\nprivate _stackMap: Map<DialogRef<T>, any>;\n/**\n * @return {?}\n */\nget length(): number {\n    return this._stack.length;\n  }\nconstructor() {\n    this._stack = [];\n    this._stackMap = new Map<DialogRef<T>, any>();\n  }\n/**\n * @param {?=} result\n * @return {?}\n */\ncloseAll(result: any = null): void {\n    for (let /** @type {?} */ i=0, /** @type {?} */ len=this._stack.length; i<len; i++) {\n      this._stack.pop().close(result);\n    }\n  }\n/**\n * @param {?} dialogRef\n * @param {?=} group\n * @return {?}\n */\npush(dialogRef: DialogRef<T>, group?: any): void {\n    if (this._stack.indexOf(dialogRef) === -1) {\n      this._stack.push(dialogRef);\n      this._stackMap.set(dialogRef, group || BASKET_GROUP);\n    }\n  }\n/**\n * Push a DialogRef into the stack and manage it so when it's done\n * it will automatically kick itself out of the stack.\n * @param {?} dialogRef\n * @param {?=} group\n * @return {?}\n */\npushManaged(dialogRef: DialogRef<T>, group?: any): void {\n    this.push(dialogRef, group);\n    dialogRef.onDestroy.subscribe(() => this.remove(dialogRef));\n  }\n/**\n * @return {?}\n */\npop(): DialogRef<T> {\n    const /** @type {?} */ dialogRef = this._stack.pop();\n    this._stackMap.delete(dialogRef);\n    return dialogRef;\n  }\n/**\n * Remove a DialogRef from the stack.\n * @param {?} dialogRef\n * @return {?}\n */\nremove(dialogRef: DialogRef<T>): void {\n    let /** @type {?} */ idx = this.indexOf(dialogRef);\n    if (idx > -1) {\n      this._stack.splice(idx, 1);\n      this._stackMap.delete(dialogRef);\n    }\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nindex(index: number): DialogRef<T> {\n    return this._stack[index];\n  }\n/**\n * @param {?} dialogRef\n * @return {?}\n */\nindexOf(dialogRef: DialogRef<T>): number {\n     return this._stack.indexOf(dialogRef);\n  }\n/**\n * @param {?} dialogRef\n * @return {?}\n */\ngroupOf(dialogRef: DialogRef<T>): any {\n    return this._stackMap.get(dialogRef);\n  }\n/**\n * @param {?} group\n * @return {?}\n */\ngroupBy(group: any): DialogRef<T>[] {\n    let /** @type {?} */ arr = [];\n    if (group) {\n      this._stackMap.forEach( (value, key) => {\n        if (value === group) {\n          arr.push(key);\n        }\n      });\n    }\n    return arr;\n  }\n/**\n * @param {?} group\n * @return {?}\n */\ngroupLength(group: any): number {\n    let /** @type {?} */ count = 0;\n    if (group) {\n      this._stackMap.forEach( (value, key) => {\n        if (value === group) {\n          count++;\n        }\n      });\n    }\n    return count;\n  }\n}\n\nfunction DialogRefStack_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogRefStack.prototype._stack;\n/** @type {?} */\nDialogRefStack.prototype._stackMap;\n}\n\n"]}