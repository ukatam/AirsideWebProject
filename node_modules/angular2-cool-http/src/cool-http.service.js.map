{"version":3,"sources":["../../src/cool-http.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAC3C,sCAAwE;AACxE,8BAAqC;AAErC,yDAAiD;AACjD,+DAAqD;AASrD;IAYE,kBAAY,IAAU;QATd,iBAAY,GAAgB,IAAI,kCAAW,EAAE,CAAC;QAE9C,mBAAc,GAAiB,EAAE,CAAC;QAClC,yBAAoB,GAA0B,EAAE,CAAC;QACjD,0BAAqB,GAA2B,EAAE,CAAC;QACnD,2BAAsB,GAAG,EAAE,CAAC;QAKlC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,sBAAW,6BAAO;aAAlB;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;;;OAAA;IAEM,kCAAe,GAAtB,UAAuB,OAAe;QACpC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACpD,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC;QACvB,CAAC;IACH,CAAC;IAEM,oCAAiB,GAAxB;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAEM,qCAAkB,GAAzB,UAA0B,MAAe;QACvC,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC;IACjC,CAAC;IAEM,uCAAoB,GAA3B,UAA4B,MAAkB;QAC5C,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAExC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAEM,yCAAsB,GAA7B,UAA8B,SAAiB;QAC7C,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,GAAG,KAAK,SAAS,EAAxB,CAAwB,CAAC,CAAC;QAExF,EAAE,CAAC,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QAE7C,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,mDAAgC,GAAvC;QACE,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;IACjC,CAAC;IAEM,6CAA0B,GAAjC,UAAkC,kBAAuC;QACvE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACrD,CAAC;IAEM,+CAA4B,GAAnC,UAAoC,kBAAuC;QACzE,IAAI,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAExE,EAAE,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAEjD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,8CAA2B,GAAlC,UAAmC,mBAAyC;QAC1E,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACvD,CAAC;IAEM,gDAA6B,GAApC,UAAqC,mBAAyC;QAC5E,IAAI,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAE1E,EAAE,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAElD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,gDAA6B,GAApC,UAAqC,UAAkB,EAAE,gBAAwB;QAC/E,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC;YAC/B,UAAU,EAAE,UAAU;YACtB,gBAAgB,EAAE,gBAAgB;SACnC,CAAC,CAAC;IACL,CAAC;IAEY,2BAAQ,GAArB,UAAsB,GAAW,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;;gBAC3E,IAAI;;;;+BAAG,IAAI;wBAER,qBAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;gCACnF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;4BACzC,CAAC,CAAC,EAAA;4BAFF,sBAAO,SAEL,EAAC;;;;KACJ;IAEY,4BAAS,GAAtB,UAAuB,GAAW,EAAE,IAAU,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;;gBACxF,IAAI;;;;+BAAG,IAAI;wBAER,qBAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;gCACpF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;4BAChD,CAAC,CAAC,EAAA;4BAFF,sBAAO,SAEL,EAAC;;;;KACJ;IAEY,2BAAQ,GAArB,UAAsB,GAAW,EAAE,IAAU,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;;gBACvF,IAAI;;;;+BAAG,IAAI;wBAER,qBAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;gCACnF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;4BAC/C,CAAC,CAAC,EAAA;4BAFF,sBAAO,SAEL,EAAC;;;;KACJ;IAEY,8BAAW,GAAxB,UAAyB,GAAW,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;;gBAC9E,IAAI;;;;+BAAG,IAAI;wBAER,qBAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;gCACtF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;4BAC/C,CAAC,CAAC,EAAA;4BAFF,sBAAO,SAEL,EAAC;;;;KACJ;IAEY,6BAAU,GAAvB,UAAwB,GAAW,EAAE,IAAU,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;;gBACzF,IAAI;;;;+BAAG,IAAI;wBAER,qBAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;gCACrF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;4BACjD,CAAC,CAAC,EAAA;4BAFF,sBAAO,SAEL,EAAC;;;;KACJ;IAEY,4BAAS,GAAtB,UAAuB,GAAW,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;;gBAC5E,IAAI;;;;+BAAG,IAAI;wBAER,qBAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;gCACpF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;4BAC1C,CAAC,CAAC,EAAA;4BAFF,sBAAO,SAEL,EAAC;;;;KACJ;IAEa,oCAAiB,GAA/B,UAAgC,GAAW,EAAE,MAAc,EAAE,IAAS,EAAE,OAAuB,EAAE,MAA+D;;gBAW1J,aAAa,mBAUb,QAAQ,mBAmBR,WAAW;;;;wBAvCf,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,IAAI,cAAO,EAAE,CAAC;wBAEnD,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;wBAE5B,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;wBAE3C,IAAI,CAAC,0CAA0C,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;wBAEjE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;wCAET,IAAI,CAAC,yCAAyC,CAAC,OAAO,CAAC,OAAO,CAAC;wBAE7D,qBAAM,IAAI,CAAC,+BAA+B,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,EAAA;;0CAA5E,SAA4E;wBAElG,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;4BACpB,MAAM,gBAAC;wBACT,CAAC;wBAED,IAAI,CAAC,0CAA0C,CAAC,aAAa,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;;;;wBAKnE,qBAAM,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE,EAAA;;wBAAvD,QAAQ,GAAG,SAA4C,CAAC;;;;wBAGxD,QAAQ,GAAG,eAAa,CAAC;;4BAGT,qBAAM,IAAI,CAAC,gCAAgC,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,EAAA;;wBAAzG,eAAe,GAAG,SAAuF,CAAC;wBAE1G,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;4BACpB,MAAM,gBAAC;wBACT,CAAC;wBAED,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;4BACjB,MAAM,IAAI,KAAK,CAAC,wBAAsB,MAAM,SAAI,GAAK,CAAC,CAAC;wBACzD,CAAC;wBAID,IAAI,CAAC;4BACH,WAAW,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;wBAChC,CAAC;wBACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACT,WAAW,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;wBAChC,CAAC;wBAED,sBAAO,WAAW,EAAC;;;;KACpB;IAEM,gCAAa,GAApB,UAAqB,GAAW,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;QAC9E,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;YAClF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,iCAAc,GAArB,UAAsB,GAAW,EAAE,IAAS,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;QAC1F,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;YACnF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,gCAAa,GAApB,UAAqB,GAAW,EAAE,IAAS,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;QACzF,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;YAClF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,mCAAgB,GAAvB,UAAwB,GAAW,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;QACjF,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;YACrF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kCAAe,GAAtB,UAAuB,GAAW,EAAE,IAAS,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;QAC3F,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;YACpF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,iCAAc,GAArB,UAAsB,GAAW,EAAE,OAA8C;QAA9C,wBAAA,EAAA,cAA8B,qBAAc,EAAE;QAC/E,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,UAAU;YACnF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,yCAAsB,GAA9B,UAA+B,GAAW,EAAE,MAAc,EAAE,IAAS,EAAE,OAAuB,EAAE,MAA+D;QAC7J,MAAM,CAAC,eAAU,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IAC5F,CAAC;IAEO,8BAAW,GAAnB,UAAoB,GAAW;QAC7B,IAAI,SAAS,GAAG,GAAG,CAAC;QAEpB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QACxC,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAEO,iCAAc,GAAtB,UAAuB,OAAuB;QAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1B,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC;QACjC,CAAC;IACH,CAAC;IAEO,uCAAoB,GAA5B,UAA6B,OAAgB;QAC3C,GAAG,CAAC,CAA2B,UAAmB,EAAnB,KAAA,IAAI,CAAC,cAAc,EAAnB,cAAmB,EAAnB,IAAmB;YAA7C,IAAM,gBAAgB,SAAA;YACzB,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAC;SAC9D;IACH,CAAC;IAEO,6DAA0C,GAAlD,UAAmD,OAAgB;QACjE,GAAG,CAAC,CAAyB,UAA2B,EAA3B,KAAA,IAAI,CAAC,sBAAsB,EAA3B,cAA2B,EAA3B,IAA2B;YAAnD,IAAM,cAAc,SAAA;YACvB,IAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAE3E,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChB,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;YAC/D,CAAC;SACF;IACH,CAAC;IAEa,kDAA+B,GAA7C,UAA8C,GAAW,EAAE,MAAc,EAAE,IAAS,EAAE,OAAqB;;wBAC9F,kBAAkB;;;;qCAAI,IAAI,CAAC,oBAAoB;;;6BAAzB,CAAA,cAAyB,CAAA;;wBAChC,qBAAM,kBAAkB,CAAC,kBAAkB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,EAAA;;0CAAvE,SAAuE;wBAE/F,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;4BACpB,MAAM,gBAAC,IAAI,EAAC;wBACd,CAAC;;;wBAL8B,IAAyB,CAAA;;4BAQ1D,sBAAO,KAAK,EAAC;;;;KACd;IAEa,mDAAgC,GAA9C,UAA+C,QAAkB,EAAE,GAAW,EAAE,MAAc,EAAE,IAAS,EAAE,OAAqB;;wBACnH,mBAAmB;;;;qCAAI,IAAI,CAAC,qBAAqB;;;6BAA1B,CAAA,cAA0B,CAAA;;wBAClC,qBAAM,mBAAmB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,EAAA;;0CAAlF,SAAkF;wBAE1G,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;4BACpB,MAAM,gBAAC,IAAI,EAAC;wBACd,CAAC;;;wBAL+B,IAA0B,CAAA;;4BAQ5D,sBAAO,KAAK,EAAC;;;;KACd;IAEO,4DAAyC,GAAjD,UAAkD,OAAgB;QAChE,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,UAAA,SAAS;YACjC,IAAM,gBAAgB,GAAG,IAAI,8BAAU,EAAE,CAAC;YAE1C,gBAAgB,CAAC,GAAG,GAAG,SAAS,CAAC;YACjC,gBAAgB,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEhD,MAAM,CAAC,gBAAgB,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,6DAA0C,GAAlD,UAAmD,iBAA+B,EAAE,OAAgB;QAClG,GAAG,CAAC,CAAuB,UAAiB,EAAjB,uCAAiB,EAAjB,+BAAiB,EAAjB,IAAiB;YAAvC,IAAM,YAAY,0BAAA;YACrB,IAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAElD,EAAE,CAAC,CAAC,WAAW,KAAK,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;gBACvC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;YACpD,CAAC;SACF;IACH,CAAC;IAQH,eAAC;AAAD,CA5UA,AA4UC;AAPM,mBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,uBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,WAAI,GAAG;CACb,EAF6F,CAE7F,CAAC;AA3UW,4BAAQ","file":"cool-http.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\nimport { HttpHeader } from './http-header.model';\r\nimport { CookieStore } from './cookie-store.service';\r\nimport { IRequestInterceptor } from './request-interceptor.interface';\r\nimport { IResponseInterceptor } from './response-interceptor.interface';\r\n\r\nexport interface Func<T, T1, T2, TResult> {\r\n  (item: T, item1: T1, item2: T2): TResult;\r\n}\r\n\r\n\r\nexport class CoolHttp {\r\n  private _http: Http;\r\n\r\n  private _cookieStore: CookieStore = new CookieStore();\r\n\r\n  private _globalHeaders: HttpHeader[] = [];\r\n  private _requestInterceptors: IRequestInterceptor[] = [];\r\n  private _responseInterceptors: IResponseInterceptor[] = [];\r\n  private _customCookieToHeaders = [];\r\n  private _baseUrl;\r\n  private _withCredentials;\r\n\r\n  constructor(http: Http) {\r\n    this._http = http;\r\n  }\r\n\r\n  public get baseUrl(): string {\r\n    return this._baseUrl;\r\n  }\r\n\r\n  public registerBaseUrl(baseUrl: string): void {\r\n    this._baseUrl = baseUrl;\r\n\r\n    if (this._baseUrl[this._baseUrl.length - 1] !== '/') {\r\n      this._baseUrl += '/';\r\n    }\r\n  }\r\n  \r\n  public deRegisterBaseUrl(): void {\r\n    this._baseUrl = null;\r\n  }\r\n\r\n  public setWithCredentials(status: boolean): void {\r\n    this._withCredentials = status;\r\n  }\r\n\r\n  public registerGlobalHeader(header: HttpHeader): void {\r\n    this.deregisterGlobalHeader(header.key);\r\n\r\n    this._globalHeaders.push(header);\r\n  }\r\n\r\n  public deregisterGlobalHeader(headerKey: string): boolean {\r\n    const indexOfHeader = this._globalHeaders.findIndex(header => header.key === headerKey);\r\n\r\n    if (indexOfHeader === -1) {\r\n      return false;\r\n    }\r\n\r\n    this._globalHeaders.splice(indexOfHeader, 1);\r\n\r\n    return true;\r\n  }\r\n\r\n  public removeAllRegisteredGlobalHeaders(): void {\r\n    this._globalHeaders.length = 0;\r\n  }\r\n\r\n  public registerRequestInterceptor(requestInterceptor: IRequestInterceptor): void {\r\n    this._requestInterceptors.push(requestInterceptor);\r\n  }\r\n\r\n  public deregisterRequestInterceptor(requestInterceptor: IRequestInterceptor): boolean {\r\n    let indexOfItem = this._requestInterceptors.indexOf(requestInterceptor);\r\n\r\n    if (indexOfItem === -1) {\r\n      return false;\r\n    }\r\n\r\n    this._requestInterceptors.splice(indexOfItem, 1);\r\n\r\n    return true;\r\n  }\r\n\r\n  public registerResponseInterceptor(responseInterceptor: IResponseInterceptor): void {\r\n    this._responseInterceptors.push(responseInterceptor);\r\n  }\r\n\r\n  public deregisterResponseInterceptor(responseInterceptor: IResponseInterceptor): boolean {\r\n    let indexOfItem = this._responseInterceptors.indexOf(responseInterceptor);\r\n\r\n    if (indexOfItem === -1) {\r\n      return false;\r\n    }\r\n\r\n    this._responseInterceptors.splice(indexOfItem, 1);\r\n\r\n    return true;\r\n  }\r\n\r\n  public sendCookieValueInCustomHeader(cookieName: string, customHeaderName: string): void {\r\n    this._customCookieToHeaders.push({\r\n      cookieName: cookieName,\r\n      customHeaderName: customHeaderName\r\n    });\r\n  }\r\n\r\n  public async getAsync(url: string, options: RequestOptions = new RequestOptions()): Promise<any> {\r\n    let that = this;\r\n\r\n    return await that._requestCoreAsync(url, 'GET', null, options, (url, data, modOptions) => {\r\n      return that._http.get(url, modOptions);\r\n    });\r\n  }\r\n\r\n  public async postAsync(url: string, data?: any, options: RequestOptions = new RequestOptions()): Promise<any> {\r\n    let that = this;\r\n\r\n    return await that._requestCoreAsync(url, 'POST', data, options, (url, data, modOptions) => {\r\n      return that._http.post(url, data, modOptions);\r\n    });\r\n  }\r\n\r\n  public async putAsync(url: string, data?: any, options: RequestOptions = new RequestOptions()): Promise<any> {\r\n    let that = this;\r\n\r\n    return await that._requestCoreAsync(url, 'PUT', data, options, (url, data, modOptions) => {\r\n      return that._http.put(url, data, modOptions);\r\n    });\r\n  }\r\n\r\n  public async deleteAsync(url: string, options: RequestOptions = new RequestOptions()): Promise<any> {\r\n    let that = this;\r\n\r\n    return await that._requestCoreAsync(url, 'DELETE', null, options, (url, data, modOptions) => {\r\n      return that._http['delete'](url, modOptions);\r\n    });\r\n  }\r\n\r\n  public async patchAsync(url: string, data?: any, options: RequestOptions = new RequestOptions()): Promise<any> {\r\n    let that = this;\r\n\r\n    return await that._requestCoreAsync(url, 'PATCH', data, options, (url, data, modOptions) => {\r\n      return that._http.patch(url, data, modOptions);\r\n    });\r\n  }\r\n\r\n  public async headAsync(url: string, options: RequestOptions = new RequestOptions()): Promise<any> {\r\n    let that = this;\r\n\r\n    return await that._requestCoreAsync(url, 'HEAD', null, options, (url, data, modOptions) => {\r\n      return that._http.head(url, modOptions);\r\n    });\r\n  }\r\n\r\n  private async _requestCoreAsync(url: string, method: string, data: any, options: RequestOptions, action: Func<string, any, RequestOptions, Observable<Response>>): Promise<any> {\r\n    options.headers = options.headers || new Headers();\r\n\r\n    url = this._convertUrl(url);\r\n\r\n    this._appendGlobalHeaders(options.headers);\r\n\r\n    this._tryAppendRegisteredCookiestoCustomHeaders(options.headers);\r\n\r\n    this._modifyOptions(options);\r\n\r\n    let clientHeaders = this._convertAngularHeadersToHttpClientHeaders(options.headers);\r\n\r\n    let shouldIntercept = await this._invokeRequestInterceptorsAsync(url, method, data, clientHeaders);\r\n\r\n    if (shouldIntercept) {\r\n      return;\r\n    }\r\n\r\n    this._updateAngularHeadersFromHttpClientHeaders(clientHeaders, options.headers);\r\n\r\n    let response;\r\n\r\n    try {\r\n      response = await action(url, data, options).toPromise();\r\n    }\r\n    catch (errorResponse) {\r\n      response = errorResponse;\r\n    }\r\n\r\n    shouldIntercept = await this._invokeResponseInterceptorsAsync(response, url, method, data, clientHeaders);\r\n\r\n    if (shouldIntercept) {\r\n      return;\r\n    }\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to call api ${method} ${url}`);\r\n    }\r\n\r\n    let returnValue;\r\n\r\n    try {\r\n      returnValue = response.json();\r\n    }\r\n    catch (e) {\r\n      returnValue = response.text();\r\n    }\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  public getObservable(url: string, options: RequestOptions = new RequestOptions()): Observable<Response> {\r\n    let that = this;\r\n\r\n    return that._requestCoreObservable(url, 'GET', null, options, (url, data, modOptions) => {\r\n      return that._http.get(url, modOptions);\r\n    });\r\n  }\r\n\r\n  public postObservable(url: string, data: any, options: RequestOptions = new RequestOptions()): Observable<Response> {\r\n    let that = this;\r\n\r\n    return that._requestCoreObservable(url, 'POST', data, options, (url, data, modOptions) => {\r\n      return that._http.post(url, data, modOptions);\r\n    });\r\n  }\r\n\r\n  public putObservable(url: string, data: any, options: RequestOptions = new RequestOptions()): Observable<Response> {\r\n    let that = this;\r\n\r\n    return that._requestCoreObservable(url, 'PUT', data, options, (url, data, modOptions) => {\r\n      return that._http.put(url, data, modOptions);\r\n    });\r\n  }\r\n\r\n  public deleteObservable(url: string, options: RequestOptions = new RequestOptions()): Observable<Response> {\r\n    let that = this;\r\n\r\n    return that._requestCoreObservable(url, 'DELETE', null, options, (url, data, modOptions) => {\r\n      return that._http['delete'](url, modOptions);\r\n    });\r\n  }\r\n\r\n  public patchObservable(url: string, data: any, options: RequestOptions = new RequestOptions()): Observable<Response> {\r\n    let that = this;\r\n\r\n    return that._requestCoreObservable(url, 'PATCH', data, options, (url, data, modOptions) => {\r\n      return that._http.patch(url, data, modOptions);\r\n    });\r\n  }\r\n\r\n  public headObservable(url: string, options: RequestOptions = new RequestOptions()): Observable<Response> {\r\n    let that = this;\r\n\r\n    return that._requestCoreObservable(url, 'HEAD', null, options, (url, data, modOptions) => {\r\n      return that._http.head(url, modOptions);\r\n    });\r\n  }\r\n\r\n  private _requestCoreObservable(url: string, method: string, data: any, options: RequestOptions, action: Func<string, any, RequestOptions, Observable<Response>>): Observable<Response> {\r\n    return Observable.fromPromise(this._requestCoreAsync(url, method, data, options, action));\r\n  }\r\n\r\n  private _convertUrl(url: string) {\r\n    let returnUrl = url;\r\n\r\n    if (this._baseUrl) {\r\n      returnUrl = this._baseUrl + returnUrl;\r\n    }\r\n\r\n    return returnUrl;\r\n  }\r\n\r\n  private _modifyOptions(options: RequestOptions) {\r\n    if (this._withCredentials) {\r\n      options.withCredentials = true;\r\n    }\r\n  }\r\n\r\n  private _appendGlobalHeaders(headers: Headers): void {\r\n    for (const registeredHeader of this._globalHeaders) {\r\n      headers.append(registeredHeader.key, registeredHeader.value);\r\n    }\r\n  }\r\n\r\n  private _tryAppendRegisteredCookiestoCustomHeaders(headers: Headers): void {\r\n    for (const cookieToHeader of this._customCookieToHeaders) {\r\n      const cookieValue = this._cookieStore.getCookie(cookieToHeader.cookieName);\r\n\r\n      if (cookieValue) {\r\n        headers.append(cookieToHeader.customHeaderName, cookieValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async _invokeRequestInterceptorsAsync(url: string, method: string, data: any, headers: HttpHeader[]): Promise<boolean> {\r\n    for (const requestInterceptor of this._requestInterceptors) {\r\n      const shouldIntercept = await requestInterceptor.beforeRequestAsync(url, method, data, headers);\r\n\r\n      if (shouldIntercept) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private async _invokeResponseInterceptorsAsync(response: Response, url: string, method: string, data: any, headers: HttpHeader[]): Promise<boolean> {\r\n    for (const responseInterceptor of this._responseInterceptors) {\r\n      const shouldIntercept = await responseInterceptor.afterResponseAsync(response, url, method, data, headers);\r\n\r\n      if (shouldIntercept) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private _convertAngularHeadersToHttpClientHeaders(headers: Headers): HttpHeader[] {\r\n    return headers.keys().map(headerKey => {\r\n      const httpClientHeader = new HttpHeader();\r\n\r\n      httpClientHeader.key = headerKey;\r\n      httpClientHeader.value = headers.get(headerKey);\r\n\r\n      return httpClientHeader;\r\n    });\r\n  }\r\n\r\n  private _updateAngularHeadersFromHttpClientHeaders(httpClientHeaders: HttpHeader[], headers: Headers): void {\r\n    for (const clientHeader of httpClientHeaders) {\r\n      const headerValue = headers.get(clientHeader.key);\r\n\r\n      if (headerValue !== clientHeader.value) {\r\n        headers.set(clientHeader.key, clientHeader.value);\r\n      }\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}